[
["index.html", "mlr3 manual 1 Quickstart", " mlr3 manual The mlr-org Team 2019-10-17 1 Quickstart As a 30-second introductory example, we will train a decision tree model on the first 120 rows of iris data set and make predictions on the final 30, measuring the accuracy of the trained model. library(mlr3) task = tsk(&quot;iris&quot;) learner = lrn(&quot;classif.rpart&quot;) # train a model of this learner for a subset of the task learner$train(task, row_ids = 1:120) # this is what the decision tree looks like learner$model ## n= 120 ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 120 70 setosa (0.41667 0.41667 0.16667) ## 2) Petal.Length&lt; 2.45 50 0 setosa (1.00000 0.00000 0.00000) * ## 3) Petal.Length&gt;=2.45 70 20 versicolor (0.00000 0.71429 0.28571) ## 6) Petal.Length&lt; 4.95 49 1 versicolor (0.00000 0.97959 0.02041) * ## 7) Petal.Length&gt;=4.95 21 2 virginica (0.00000 0.09524 0.90476) * predictions = learner$predict(task, row_ids = 121:150) predictions ## &lt;PredictionClassif&gt; for 30 observations: ## row_id truth response ## 121 virginica virginica ## 122 virginica versicolor ## 123 virginica virginica ## --- ## 148 virginica virginica ## 149 virginica virginica ## 150 virginica virginica # accuracy of our model on the test set of the final 30 rows predictions$score(&quot;classif.acc&quot;) ## Warning: &#39;Automatic object creation from strings in `mlr3`&#39; is deprecated. ## Use &#39;msr&#39; instead. ## See help(&quot;Deprecated&quot;) ## classif.acc ## 0.8333 The code examples in this book use a few additional packages that are not installed by default if you install mlr3. To run all examples in the book, install the mlr3book package using the remotes package: remotes::install_github(&quot;mlr-org/mlr3book&quot;, dependencies = TRUE) In most cases you do not want to run all code blocks of the book but just some parts of it. In these cases it is easiest to install the mlr3verse pkg (a wrapper package for the core packages of the mlr3 package framework) and install missing packages for specific sections as needed. remotes::install_github(&quot;mlr-org/mlr3verse&quot;) library(mlr3) Sometimes certain packages of the mlr3verse are ahead of the code examples in the book. If you want to install the state of packages which correspond to the latest published version of the book, use ## [1] remotes::install_github(c(&#39;mlr-org/mlr3@d71ac72&#39;, &#39;mlr-org/mlr3db@04d84e2&#39;, &#39;mlr-org/mlr3filters@4eacfcd&#39;, &#39;mlr-org/mlr3learners@6dc9ef6&#39;, &#39;mlr-org/mlr3misc@dc460e6&#39;, &#39;mlr-org/mlr3ordinal@58ad848&#39;, &#39;mlr-org/mlr3pipelines@f78ea55&#39;, &#39;mlr-org/mlr3spatiotemporal@1d3ba2f&#39;, &#39;mlr-org/mlr3survival@03388f3&#39;, &#39;mlr-org/mlr3tuning@088b591&#39;, &#39;mlr-org/mlr3viz@a68cf1f&#39;, &#39;mlr-org/paradox@4bad616&#39;, &#39;R 3.6.0&#39;), force = TRUE) "],
["introduction-and-overview.html", "2 Introduction and Overview", " 2 Introduction and Overview The mlr3 package and ecosystem provides a generic, object-oriented, and extensible framework for classification, regression, survival analysis, and other machine learning tasks for the R language. It does not implement any learners itself, but provides a unified interface to many existing learners in R. This unified interface allows to provide functionality to extend and combine existing learners, intelligently select and tune the most appropriate technique for a task, and perform large-scale comparisons that enable meta-learning. Examples of this advanced functionality include hyperparameter tuning, feature selection, and ensemble construction. Parallelization of many operations is natively supported. Target Audience mlr3 provides a domain-specific language for machine learning in R. We target both practitioners who want to quickly apply machine learning algorithms and researchers who want to implement, benchmark, and compare their new methods in a structured environment. The package is a complete rewrite of an earlier version of mlr that leverages many years of experience to provide a state-of-the-art system that is easy to use and extend. It is intended for users who have basic knowledge in machine learning and R and who are interested in complex projects and advanced functionality rather than one-liners for one specific thing. Why a Rewrite? mlr was first released to CRAN in 2013, with the core design and architecture dating back much further. Over time, the addition of many features has led to a considerably more complex design that made it harder to build, maintain, and extend than we had hoped for. With hindsight, we saw that some of the design and architecture changes in mlr made it difficult to support new features, in particular with respect to pipelines. Furthermore, the R ecosystem as well as helpful packages such as data.table have undergone major changes in the meantime. It would have been nearly impossible to integrate all these changes into the original design of mlr. Instead, we decided to start working on a reimplementation in 2018, which resulted in the first release of mlr3 on CRAN in July 2019. The new design and the integration of further and newly developed R packages (R6, future, data.table) makes mlr3 much easier to maintain and use, and more performant compared to mlr. Design Principles We follow the general design principles below in the implementation of the mlr3 package and ecosystem. Backend over frontend. Most packages of the mlr3 ecosystem focus on processing and transforming data, applying machine learning algorithms, and computing results. We do not provide graphical user interfaces (GUIs) and visualizations of data and results is provided in extra packages. Embrace R6 for a clean object-oriented design, object state-changes, and reference semantics. Embrace data.table for fast and convenient data frame computations. Unify container and result classes as much as possible and provide result data in data.tables. This considerably simplifies the API and allows easy selection and “split-apply-combine” (aggregation) operations. We combine data.table and R6 to place references to non-atomic and compound objects in tables and make heavy use of list columns. Be light on dependencies. One of the main maintenance burdens for mlr was to keep up with changing learner interfaces and behaviour of the many packages it depended on. We require far fewer packages in mlr3 to make installation and maintenance easier. mlr3 requires the following packages: backports: Ensures backward compatibility with older R releases. Developed by members of the mlr team. No recursive dependencies. checkmate: Fast argument checks. Developed by members of the mlr team. No extra recursive dependencies. mlr3misc: Miscellaneous functions used in multiple mlr3 extension packages. Developed by the mlr team. No extra recursive dependencies. paradox: Descriptions for parameters and parameter sets. Developed by the mlr team. No extra recursive dependencies. R6: Reference class objects. No recursive dependencies. data.table: Extension of R’s data.frame. No recursive dependencies. digest: Hash digests. No recursive dependencies. uuid: Create unique string identifiers. No recursive dependencies. lgr: Logging facility. No extra recursive dependencies. Metrics: Package which implements performance measures. No recursive dependencies. mlbench: A collection of machine learning data sets. No dependencies. mlr3 provides additional functionality through extra packages: For parallelization, mlr3 utilizes the future and future.apply packages. To capture output, warnings, and exceptions, evaluate and callr can be used. "],
["basics.html", "3 mlr3 Basics", " 3 mlr3 Basics This chapter will teach you the essential building blocks, R6 classes, and operations of mlr3. This includes creating supervised machine learning tasks like classification and regression, training models and getting prediction on new data, and evaluating and comparing different models through cross-validation and benchmarking. A typical machine learning workflow looks like this: The data, which mlr3 encapsulates in tasks, is split into non-overlapping train and test sets to be able to evaluate models objectively — we are interested in models that generalize to new data rather than just memorizing the training data. The training data is given to a machine learning algorithm, called a learner in mlr3, that uses it to build a model of how the features of the data relate to the target values. This model is then used to produce predictions on the test data, which are compared to the ground truth values to assess the quality of the model. mlr3 offers a number of different measures to quantify this quality; usually a numeric score. This process may be repeated several times, each time resampling different train and test sets from the original data set. Multiple resampling iterations allow one to get a better generalization performance estimate for a particular type of model by quantifying its performance on different data. The mlr3 package provides R6 classes for the essential building blocks of this machine learning workflow: A task encapsulates the data along with additional information, such as what the prediction target is. A learners encapsulates one of R’s many machine learning algorithms and allows to train models and make predictions. Most learners have hyperparameters that affect their operation. A measure computes a numeric score based on predicted and ground-truth values and their difference. A resampling specifies a series of train and test sets. In many cases, this simple workflow is not sufficient to deal with real-world data, which may require normalization, imputation of missing values, or feature selection. We will cover more complex workflows that allow to do this and even more later in the book. For now, we restrict ourselves to simple workflows like the one above for the sake of clarity. "],
["quick-r6-intro-for-beginners.html", "3.1 Quick R6 Intro for Beginners", " 3.1 Quick R6 Intro for Beginners R6 is one of R’s more recent dialects for object-oriented programming (OO). It addresses shortcomings of earlier OO implementations in R, such as S3, which we used in mlr. If you are not familiar with OO programming, it might take a bit to find your way around, but if you have done OO in another language, R6 should feel familiar. We focus on the parts of R6 that you need to know to use mlr3 here without going into further detail. Objects are created by calling the constructor of an R6Class() object. For example foo = Foo$new(bar = 1) creates a new object of class Foo, setting the bar argument of the constructor to 1. Classes have mutable state which is encapsulated in their fields. Continuing with the previous example, assuming that the constructor sets the public field bar to 1, we can access its value through the dollar operator: foo$bar or foo$bar = 2. In addition to fields, objects expose methods that may allow to inspect the object’s state or retrieve information and perform an action that may change the internal state of the object. As an example, the $train method of a learner changes the internal state by producing and storing a trained model. Objects can have public and private fields and methods. As a user of mlr3, you can only access the public variables and methods – the private are only relevant if you want to change or extend mlr3. R6 variables are references to the actual object in the environment; they do not hold the object itself. For example foo2 = foo does not create a copy of foo and store it in foo2, but only the reference to the actual object. foo and foo2 refer to the same object, and setting foo$bar = 3 will also change foo2$bar to 3. To copy an object, use the $clone() method; use the deep = TRUE argument for nested objects, for example foo2 = foo$clone(deep = TRUE). For more details on R6, have a look at the R6 vignettes. "],
["tasks.html", "3.2 Tasks", " 3.2 Tasks Tasks are objects for the data and additional meta-data for a machine learning problem. The meta-data is for example the name of the target variable (the prediction) for supervised machine learning problems, or the type of the dataset (e.g. a spatial or survival). This information is used for specific operations that can be performed on a task. 3.2.1 Task Types To create a task from a data.frame() or data.table() object, the task type needs to be specified: Classification Task: The target is a label (stored as character()orfactor()) with only few distinct values. → mlr3::TaskClassif Regression Task: The target is a numeric quantity (stored as integer() or double()). → mlr3::TaskRegr Survival Task: The target is the (right-censored) time to an event. → mlr3survival::TaskSurv in add-on package mlr3survival Ordinal Regression Task: The target is ordinal. → mlr3ordinal::TaskOrdinal in add-on package mlr3ordinal Cluster Task: An unsupervised task type; there is no target and the aim is to identify similar groups within the feature space. → Not yet implemented Spatial Task: Observations in the task have spatio-temporal information (e.g. coordinates). → Not yet implemented, but started in add-on package mlr3spatiotemporal 3.2.2 Task Creation As an example, we will create a regression task using the mtcars data set from the package datasets and predict the target &quot;mpg&quot; (miles per gallon). We only consider the first two features in the dataset for brevity. First, we load and prepare the data. data(&quot;mtcars&quot;, package = &quot;datasets&quot;) data = mtcars[, 1:3] str(data) ## &#39;data.frame&#39;: 32 obs. of 3 variables: ## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... ## $ disp: num 160 160 108 258 360 ... Next, we create the task using the constructor for a regression task object (TaskRegr$new) and give the following information: id: An arbitrary identifier for the task, used in plots and summaries. backend: This parameter allows fine-grained control over how data is accessed. Here, we simply provide the dataset which is automatically converted to a DataBackendDataTable. We could also construct a DataBackend manually. target: The name of the target column for the regression problem. library(mlr3) task_mtcars = TaskRegr$new(id = &quot;cars&quot;, backend = data, target = &quot;mpg&quot;) print(task_mtcars) ## &lt;TaskRegr:cars&gt; (32 x 3) ## * Target: mpg ## * Properties: - ## * Features (2): ## - dbl (2): cyl, disp The print() method gives a short summary of the task: it has 32 observations and 3 columns, of which 2 are features. We can also plot the task using the mlr3viz package, which gives a graphical summary of its properties: library(mlr3viz) autoplot(task_mtcars, type = &quot;pairs&quot;) ## Registered S3 method overwritten by &#39;GGally&#39;: ## method from ## +.gg ggplot2 3.2.3 Predefined tasks mlr3 ships with a few predefined machine learning tasks. All tasks are stored in an R6 Dictionary (a key-value store) named mlr_tasks. Printing it gives the keys (the names of the datasets): mlr_tasks ## &lt;DictionaryTask&gt; with 9 stored values ## Keys: boston_housing, german_credit, iris, mtcars, pima, sonar, spam, ## wine, zoo We can get a more informative summary of the example tasks by converting the dictionary to a data.table() object: library(data.table) as.data.table(mlr_tasks) ## key task_type nrow ncol lgl int dbl chr fct ord pxc ## 1: boston_housing regr 506 19 0 3 13 0 2 0 0 ## 2: german_credit classif 1000 21 0 0 7 0 12 1 0 ## 3: iris classif 150 5 0 0 4 0 0 0 0 ## 4: mtcars regr 32 11 0 0 10 0 0 0 0 ## 5: pima classif 768 9 0 0 8 0 0 0 0 ## 6: sonar classif 208 61 0 0 60 0 0 0 0 ## 7: spam classif 4601 58 0 0 57 0 0 0 0 ## 8: wine classif 178 14 0 2 11 0 0 0 0 ## 9: zoo classif 101 17 15 1 0 0 0 0 0 To get a task from the dictionary, one can use the $get() method from the mlr_tasks class and assign the return value to a new object. For example, to use the iris data set for classification: task_iris = mlr_tasks$get(&quot;iris&quot;) print(task_iris) ## &lt;TaskClassif:iris&gt; (150 x 5) ## * Target: Species ## * Properties: multiclass ## * Features (4): ## - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width Alternatively, you can also use the convenience function tsk(), which also constructs a task from the dictionary. tsk(&quot;iris&quot;) ## &lt;TaskClassif:iris&gt; (150 x 5) ## * Target: Species ## * Properties: multiclass ## * Features (4): ## - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width 3.2.4 Task API All task properties and characteristics can be queried using the task’s public fields and methods (see Task). Methods are also used to change the behavior of the task. 3.2.4.1 Retrieving Data The data stored in a task can be retrieved directly from fields, for example: task_iris$nrow ## [1] 150 task_iris$ncol ## [1] 5 More information can be obtained through methods of the object, for example: task_iris$data() ## Species Petal.Length Petal.Width Sepal.Length Sepal.Width ## 1: setosa 1.4 0.2 5.1 3.5 ## 2: setosa 1.4 0.2 4.9 3.0 ## 3: setosa 1.3 0.2 4.7 3.2 ## 4: setosa 1.5 0.2 4.6 3.1 ## 5: setosa 1.4 0.2 5.0 3.6 ## --- ## 146: virginica 5.2 2.3 6.7 3.0 ## 147: virginica 5.0 1.9 6.3 2.5 ## 148: virginica 5.2 2.0 6.5 3.0 ## 149: virginica 5.4 2.3 6.2 3.4 ## 150: virginica 5.1 1.8 5.9 3.0 In mlr3, each row (observation) has a unique identifier is either an integer or character. These can be passed as arguments to the $data() method to select specific rows. The iris task uses integer row_ids: # iris uses integer row_ids head(task_iris$row_ids) ## [1] 1 2 3 4 5 6 # retrieve data for rows with ids 1, 51, and 101 task_iris$data(rows = c(1, 51, 101)) ## Species Petal.Length Petal.Width Sepal.Length Sepal.Width ## 1: setosa 1.4 0.2 5.1 3.5 ## 2: versicolor 4.7 1.4 7.0 3.2 ## 3: virginica 6.0 2.5 6.3 3.3 The mtcars task on the other hand uses names for its row_ids, encoded as character: task_mtcars = tsk(&quot;mtcars&quot;) head(task_mtcars$row_ids) ## [1] &quot;AMC Javelin&quot; &quot;Cadillac Fleetwood&quot; &quot;Camaro Z28&quot; ## [4] &quot;Chrysler Imperial&quot; &quot;Datsun 710&quot; &quot;Dodge Challenger&quot; # retrieve data for rows with id &quot;Datsun 710&quot; task_mtcars$data(rows = &quot;Datsun 710&quot;) ## mpg am carb cyl disp drat gear hp qsec vs wt ## 1: 22.8 1 1 4 108 3.85 4 93 18.61 1 2.32 Note that the method $data() only allows to read the data and does not modify it. Similarly, each column has an identifier or name. These names are stored in the public slots feature_names and target_names. Here “target” refers to the variable we want to predict and “feature” to the predictors for the task. task_iris$feature_names ## [1] &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; task_iris$target_names ## [1] &quot;Species&quot; The row_ids and column names can be combined when selecting a subset of the data: # retrieve data for rows 1, 51, and 101 and only select column &quot;Species&quot; task_iris$data(rows = c(1, 51, 101), cols = &quot;Species&quot;) ## Species ## 1: setosa ## 2: versicolor ## 3: virginica To extract the complete data from the task, one can simply convert it to a data.table: summary(as.data.table(task_iris)) ## Species Petal.Length Petal.Width Sepal.Length Sepal.Width ## setosa :50 Min. :1.00 Min. :0.1 Min. :4.30 Min. :2.00 ## versicolor:50 1st Qu.:1.60 1st Qu.:0.3 1st Qu.:5.10 1st Qu.:2.80 ## virginica :50 Median :4.35 Median :1.3 Median :5.80 Median :3.00 ## Mean :3.76 Mean :1.2 Mean :5.84 Mean :3.06 ## 3rd Qu.:5.10 3rd Qu.:1.8 3rd Qu.:6.40 3rd Qu.:3.30 ## Max. :6.90 Max. :2.5 Max. :7.90 Max. :4.40 3.2.4.2 Roles (Rows and Columns) It is possible to assign roles to rows and columns. These roles affect the behavior of the task for different operations and provide additional meta-data for it. For example, the previously-constructed mtcars task has the following column roles: print(task_mtcars$col_roles) ## $feature ## [1] &quot;am&quot; &quot;carb&quot; &quot;cyl&quot; &quot;disp&quot; &quot;drat&quot; &quot;gear&quot; &quot;hp&quot; &quot;qsec&quot; &quot;vs&quot; &quot;wt&quot; ## ## $target ## [1] &quot;mpg&quot; ## ## $name ## character(0) ## ## $order ## character(0) ## ## $stratify ## character(0) ## ## $groups ## character(0) ## ## $weights ## character(0) To add the row names of mtcars as an additional feature, we first add them to the data table and then recreate the task. # with `keep.rownames`, data.table stores the row names in an extra column &quot;rn&quot; data = as.data.table(mtcars[, 1:3], keep.rownames = TRUE) task = TaskRegr$new(id = &quot;cars&quot;, backend = data, target = &quot;mpg&quot;) # we now have integer row_ids task$row_ids ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 # there is a new feature called &quot;rn&quot; task$feature_names ## [1] &quot;cyl&quot; &quot;disp&quot; &quot;rn&quot; The row names are now a feature whose values are stored in the column “rn”. We include this here for educational purposes only; in general, there is no point in having a feature that uniquely identifies each row. Further, the character data type will cause problems with many types of machine learning algorithms. The identifier may be useful to label points in plots and identify outliers however. To use the new column for only this purpose, we will change the role of the “rn” column and remove it from the set of active features. task$feature_names ## [1] &quot;cyl&quot; &quot;disp&quot; &quot;rn&quot; # working with a list of column vectors task$col_roles$name = &quot;rn&quot; task$col_roles$feature = setdiff(task$col_roles$feature, &quot;rn&quot;) # &quot;rn&quot; not listed as feature anymore task$feature_names ## [1] &quot;cyl&quot; &quot;disp&quot; # does also not appear when we access the data anymore task$data(rows = 1:2) ## mpg cyl disp ## 1: 21 6 160 ## 2: 21 6 160 task$head(2) ## mpg cyl disp ## 1: 21 6 160 ## 2: 21 6 160 Changing the role does not change the underlying data, but only the view on it – the data is not copied in the code above. The view is changed in-place though, i.e. the task object itself is modified. Just like columns, it is also possible to assign different roles to rows. Rows can have two different roles: Role use: Rows that are generally available for model fitting (although they may also be used as test set in resampling). This is the default role. Role validation: Rows not used for training. Rows that have missing values in the target column during task creation are automatically set to the validation role. There are several reasons to hold some observations back or treat them differently: 1. It is often good practice to validate the final model on an external validation set to identify possible overfitting. 1. Some observations may be unlabeled, e.g. in competitions like Kaggle. These observations cannot be used for training a model, but can be used to get predictions. 3.2.4.3 Task Mutators As shown above, modifying $col_roles or $row_roles changes the view on the data . The additional convenience method $filter() subsets the current view based on row ids and $select() subsets the view based on feature names. task = tsk(&quot;iris&quot;) task$select(c(&quot;Sepal.Width&quot;, &quot;Sepal.Length&quot;)) # keep only these features task$filter(1:3) # keep only these rows task$head() ## Species Sepal.Length Sepal.Width ## 1: setosa 5.1 3.5 ## 2: setosa 4.9 3.0 ## 3: setosa 4.7 3.2 While the methods discussed above allow to subset the data, the methods $rbind() and $cbind() allow to add extra rows and columns to a task. Again the original data is not changed; the additional rows or columns are only added to the view of the data. task$cbind(data.table(foo = letters[1:3])) # add column foo task$head() ## Species Sepal.Length Sepal.Width foo ## 1: setosa 5.1 3.5 a ## 2: setosa 4.9 3.0 b ## 3: setosa 4.7 3.2 c "],
["learners.html", "3.3 Learners", " 3.3 Learners Objects of class mlr3::Learner provide a unified interface to many popular machine learning algorithms in R. They consist of methods to train and predict a model for a mlr3::Task and provide meta-information about the learners, such as the hyperparameters you can set. The package ships with a minimal set of classification and regression learners to avoid lots of dependencies: mlr_learners_classif.featureless: Simple baseline classification learner, constantly predicts the label most most frequent label. mlr_learners_classif.rpart: Single classification tree from rpart. mlr_learners_regr.featureless: Simple baseline regression learner, constantly predicts with the mean. mlr_learners_regr.rpart: Single regression tree from rpart. Some of the most popular learners are connected via the mlr3learners package: (penalized) linear and logistic regression \\(k\\)-Nearest Neighbors regression and classification Linear and Quadratic Discriminant Analysis Naive Bayes Support-Vector machines Gradient Boosting Random Regression Forests and Random Classification Forests Kriging The base class of learners is Learner, specialized for regression as LearnerRegr and for classification as LearnerClassif. In contrast to the Task, the creation of a custom Learner is usually not required and a more advanced topic. Hence, we refer the reader to Section 7.1.1 and proceed with an overview of the interface of already implemented learners. 3.3.1 Predefined Learners Similar to mlr_tasks, the Dictionary mlr_learners can be queried for available learners: library(mlr3learners) mlr_learners ## &lt;DictionaryLearner&gt; with 21 stored values ## Keys: classif.debug, classif.featureless, classif.glmnet, classif.kknn, ## classif.lda, classif.log_reg, classif.naive_bayes, classif.qda, ## classif.ranger, classif.rpart, classif.svm, classif.xgboost, ## regr.featureless, regr.glmnet, regr.kknn, regr.km, regr.lm, ## regr.ranger, regr.rpart, regr.svm, regr.xgboost Each learner has the following information: feature_types: the type of features the learner can deal with. packages: the packages required to train a model with this learner and make predictions. properties: additional properties and capabilities. For example, a learner has the property “missings” if it is able to handle missing feature values, and “importance” if it computes and allows to extract data on the relative importance of the features. A complete list of these is available in the mlr3 reference on regression learners and classification learners. predict_types: possible prediction types. For example, a classification learner can predict labels (“response”) or probabilities (“prob”). For a complete list of possible predict types see the mlr3 reference. For a tabular overview of integrated learners, see Section 11.1. You can get a specific learner using its id, listed under key in the dictionary: learner = mlr_learners$get(&quot;classif.rpart&quot;) print(learner) ## &lt;LearnerClassifRpart:classif.rpart&gt; ## * Model: - ## * Parameters: xval=0 ## * Packages: rpart ## * Predict Type: response ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: importance, missings, multiclass, selected_features, ## twoclass, weights The field param_set stores a description of the hyperparameters the learner has, their ranges, defaults, and current values: learner$param_set ## ParamSet: ## id class lower upper levels default value ## 1: minsplit ParamInt 1 Inf 20 ## 2: cp ParamDbl 0 1 0.01 ## 3: maxcompete ParamInt 0 Inf 4 ## 4: maxsurrogate ParamInt 0 Inf 5 ## 5: maxdepth ParamInt 1 30 30 ## 6: xval ParamInt 0 Inf 10 0 The set of current hyperparameter values is stored in the values field of the param_set field. You can change the current hyperparameter values by assigning a named list to this field: learner$param_set$values = list(cp = 0.01, xval = 0) learner ## &lt;LearnerClassifRpart:classif.rpart&gt; ## * Model: - ## * Parameters: cp=0.01, xval=0 ## * Packages: rpart ## * Predict Type: response ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: importance, missings, multiclass, selected_features, ## twoclass, weights Note that this operation just overwrites all previously set parameters. If you just want to add or update hyperparameters, you can use mlr3misc::insert_named(): learner$param_set$values = mlr3misc::insert_named( learner$param_set$values, list(cp = 0.02, minsplit = 2) ) learner ## &lt;LearnerClassifRpart:classif.rpart&gt; ## * Model: - ## * Parameters: cp=0.02, xval=0, minsplit=2 ## * Packages: rpart ## * Predict Type: response ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: importance, missings, multiclass, selected_features, ## twoclass, weights This updates cp to 0.02, sets minsplit to 2 and keeps the previously set parameter xval. Again, there is an alternative to writing down the lengthy mlr_learners$get() part: lrn(). This function additionally allows to construct learners with specific hyperparameters or settings of a different identifier in one go: lrn(&quot;classif.rpart&quot;, id = &quot;rp&quot;, cp = 0.001) ## &lt;LearnerClassifRpart:rp&gt; ## * Model: - ## * Parameters: xval=0, cp=0.001 ## * Packages: rpart ## * Predict Type: response ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: importance, missings, multiclass, selected_features, ## twoclass, weights If you pass hyperparameters here, it is added to the default parameters in a insert_named-fashion. "],
["train-predict.html", "3.4 Train &amp; Predict", " 3.4 Train &amp; Predict In this chapter, we explain how tasks and learners can be used to train a model and predict to a new dataset. The concept is demonstrated on a supervised classification using the iris dataset and the rpart learner (classification tree). Additionally, this chapter includes the following use-cases Functional Data Analysis using (WIP) Regression Analysis using (WIP) Survival Analysis using (WIP) Spatial Analysis using (WIP) 3.4.1 Basic concept 3.4.1.1 Creating Task and Learner Objects The first step is to generate the following mlr3 objects from the task dictionary and the learner dictionary, respectively: The classification task task = tsk(&quot;iris&quot;) A learner for the classification tree learner = lrn(&quot;classif.rpart&quot;) 3.4.1.2 Setting up the train/test splits of the data (#split-data) It is common to train on a majority of the data. Here we use 80% of all available observations and predict on the remaining 20% observations. For this purpose, we create two index vectors: train_set = sample(task$nrow, 0.8 * task$nrow) test_set = setdiff(seq_len(task$nrow), train_set) 3.4.1.3 Training the learner The field model stores the model that is produced in the training step. Before the train method is called on a learner object, this field is NULL: learner$model ## NULL Next, the classification tree is trained using the train set of the iris task, applying the $train() method of the Learner: learner$train(task, row_ids = train_set) This operation modifies the learner in-place. We can now access the stored model via the field $model: print(learner$model) ## n= 120 ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 120 77 virginica (0.3417 0.3000 0.3583) ## 2) Petal.Length&lt; 2.45 41 0 setosa (1.0000 0.0000 0.0000) * ## 3) Petal.Length&gt;=2.45 79 36 virginica (0.0000 0.4557 0.5443) ## 6) Petal.Width&lt; 1.75 39 4 versicolor (0.0000 0.8974 0.1026) * ## 7) Petal.Width&gt;=1.75 40 1 virginica (0.0000 0.0250 0.9750) * 3.4.1.4 Predicting After the model has been trained, we use the remaining part of the data for prediction. Remember that we initially split the data in train_set and test_set. prediction = learner$predict(task, row_ids = test_set) print(prediction) ## &lt;PredictionClassif&gt; for 30 observations: ## row_id truth response ## 1 setosa setosa ## 8 setosa setosa ## 9 setosa setosa ## --- ## 129 virginica virginica ## 135 virginica versicolor ## 138 virginica virginica The $predict() method of the Learner returns a Prediction object. More precise, as the learner is specialized for classification, a LearnerClassif returns a PredictionClassif object. A prediction objects holds The row ids of the test data, the respective true label of the target column and the respective predictions. The simplest way to extract this information is by converting to a data.table(): head(as.data.table(prediction)) ## row_id truth response ## 1: 1 setosa setosa ## 2: 8 setosa setosa ## 3: 9 setosa setosa ## 4: 22 setosa setosa ## 5: 27 setosa setosa ## 6: 30 setosa setosa For classification, you can also extract the confusion matrix: prediction$confusion ## truth ## response setosa versicolor virginica ## setosa 9 0 0 ## versicolor 0 14 1 ## virginica 0 0 6 3.4.1.4.1 Performance assessment The last step of an modeling is usually the performance assessment where we choose performance measure to quantify the predictions by comparing the predicted labels with the true labels. Available measures are stored in mlr_measures (with convenience getter msr()): mlr_measures ## &lt;DictionaryMeasure&gt; with 31 stored values ## Keys: classif.acc, classif.auc, classif.ce, classif.costs, classif.dor, ## classif.f_score, classif.fdr, classif.fn, classif.fnr, classif.for, ## classif.fp, classif.fpr, classif.npv, classif.ppv, classif.precision, ## classif.recall, classif.sensitivity, classif.specificity, classif.tn, ## classif.tnr, classif.tp, classif.tpr, debug, oob_error, regr.mae, ## regr.mse, regr.rmse, selected_features, time_both, time_predict, ## time_train We select the accuracy (classif.acc) and call the method $score() of the Prediction object. measure = msr(&quot;classif.ce&quot;) prediction$score(measure) ## classif.ce ## 0.03333 Note that, if no measure is specified, classification defaults to classification error (classif.ce) and regression defaults to the mean squared error (regr.mse). "],
["resampling.html", "3.5 Resampling", " 3.5 Resampling 3.5.1 Settings In this example we use the iris task and a simple classification tree (package rpart). task = tsk(&quot;iris&quot;) learner = lrn(&quot;classif.rpart&quot;) When performing resampling with a dataset, we first need to define which approach should be used. The resampling strategies of mlr3 can be queried using the .$keys() method of the mlr_resamplings dictionary. mlr_resamplings ## &lt;DictionaryResampling&gt; with 6 stored values ## Keys: bootstrap, custom, cv, holdout, repeated_cv, subsampling Additional resampling methods for special use cases will be available via extension packages, such as mlr3spatiotemporal for spatial data (still in development). The model fit conducted in the train/predict/score chapter is equivalent to a “holdout”, so let’s consider this one first. Again, we can retrieve elements via $get() or with a convenience function (rsmp()): resampling = rsmp(&quot;holdout&quot;) print(resampling) ## &lt;ResamplingHoldout&gt; with 1 iterations ## * Instantiated: FALSE ## * Parameters: ratio=0.6667 Note that the Instantiated field is set to FALSE. This means we did not actually apply the strategy on a dataset yet, but just performed a dry-run. Applying the strategy on a dataset is done in section next Instantation. By default we get a .66/.33 split of the data. There are two ways in which the ratio can be changed: Overwriting the slot in .$param_set$values using a named list. resampling$param_set$values = list(ratio = 0.8) Specifying the resampling parameters directly during construction: rsmp(&quot;holdout&quot;, ratio = 0.8) ## &lt;ResamplingHoldout&gt; with 1 iterations ## * Instantiated: FALSE ## * Parameters: ratio=0.8 3.5.2 Instantiation So far we just set the stage and selected the resampling strategy. To actually perform the splitting, we need to apply the settings on a dataset. This can be done in two ways: Manually by calling the method .$instantiate() on a Task resampling = rsmp(&quot;cv&quot;, folds = 3L) resampling$instantiate(task) resampling$iters ## [1] 3 resampling$train_set(1) ## [1] 3 4 5 7 9 10 11 12 13 15 18 21 22 27 30 32 34 35 ## [19] 40 47 48 65 68 74 75 78 80 85 86 87 88 92 97 98 99 102 ## [37] 105 109 114 122 124 133 134 135 138 144 146 147 148 150 2 16 19 23 ## [55] 25 26 33 36 37 39 41 43 44 46 49 51 58 59 60 62 67 69 ## [73] 71 72 82 84 89 90 93 95 96 100 103 107 108 110 112 113 115 116 ## [91] 120 121 127 129 130 136 137 141 142 145 Automatically by passing the resampling object to resample(). Here, the splitting is done within the resample() call based on the supplied Task. learner1 = lrn(&quot;classif.rpart&quot;) # simple classification tree learner2 = lrn(&quot;classif.featureless&quot;) # featureless learner, prediction majority class rr1 = resample(task, learner1, resampling) rr2 = resample(task, learner2, resampling) setequal(rr1$resampling$train_set(1), rr2$resampling$train_set(1)) ## [1] TRUE If you want to compare multiple learners, you should use the same resampling per task to reduce the variance of the performance estimation (method 1). If you use method 2 (and do not instantiate manually before), the resampling splits will differ between both runs. If you aim is to compare different Task, Learner or Resampling, you are better off using the benchmark() function. It is basically a wrapper around resample() simplifying the handling of multiple settings. If you discover this only after you’ve run multiple resample() calls, don’t worry - you can transform multiple single ResampleResult objects into a BenchmarkResult (explained later) using the .$combine() method. 3.5.3 Execution With a Task, a Learner and Resampling object we can call resample() and create a ResampleResult object. Before we go into more detail, let’s change the resampling to a “3-fold cross-validation” to better illustrate what operations are possible with a ResampleResult. Additionally, we tell resample() to keep the fitted models via the flag store_models: task = tsk(&quot;iris&quot;) learner = lrn(&quot;classif.rpart&quot;) resampling = rsmp(&quot;cv&quot;, folds = 3L) rr = resample(task, learner, resampling, store_models = TRUE) print(rr) ## &lt;ResampleResult&gt; of 3 iterations ## * Task: iris ## * Learner: classif.rpart ## * Warnings: 0 in 0 iterations ## * Errors: 0 in 0 iterations The following operations are supported with ResampleResult objects: Extract the performance for the individual resampling iterations: rr$score(&quot;classif.ce&quot;) ## Warning: &#39;Automatic object creation from strings in `mlr3`&#39; is deprecated. ## Use &#39;msr&#39; instead. ## See help(&quot;Deprecated&quot;) ## task task_id learner learner_id resampling ## 1: &lt;TaskClassif&gt; iris &lt;LearnerClassifRpart&gt; classif.rpart &lt;ResamplingCV&gt; ## 2: &lt;TaskClassif&gt; iris &lt;LearnerClassifRpart&gt; classif.rpart &lt;ResamplingCV&gt; ## 3: &lt;TaskClassif&gt; iris &lt;LearnerClassifRpart&gt; classif.rpart &lt;ResamplingCV&gt; ## resampling_id iteration prediction classif.ce ## 1: cv 1 &lt;list&gt; 0.04 ## 2: cv 2 &lt;list&gt; 0.12 ## 3: cv 3 &lt;list&gt; 0.04 Extract and inspect the resampling splits: rr$resampling ## &lt;ResamplingCV&gt; with 3 iterations ## * Instantiated: TRUE ## * Parameters: folds=3 rr$resampling$iters ## [1] 3 rr$resampling$test_set(1) ## [1] 6 7 11 12 14 18 24 27 34 35 39 41 42 44 47 48 59 63 66 ## [20] 69 72 73 76 77 79 83 85 89 94 95 99 103 105 106 109 113 117 118 ## [39] 119 126 129 130 132 135 136 139 142 144 148 149 rr$resampling$train_set(3) ## [1] 6 7 11 12 14 18 24 27 34 35 39 41 42 44 47 48 59 63 ## [19] 66 69 72 73 76 77 79 83 85 89 94 95 99 103 105 106 109 113 ## [37] 117 118 119 126 129 130 132 135 136 139 142 144 148 149 2 3 4 5 ## [55] 8 13 15 16 17 20 21 23 25 26 30 36 38 40 51 54 56 58 ## [73] 61 62 68 74 78 80 82 84 86 90 92 100 107 108 116 120 122 123 ## [91] 124 125 128 131 133 134 137 140 146 150 Retrieve the learner of a specific iteration and inspect it: lrn = rr$learners[[1]] lrn$model ## n= 100 ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 100 65 versicolor (0.34000 0.35000 0.31000) ## 2) Petal.Length&lt; 2.6 34 0 setosa (1.00000 0.00000 0.00000) * ## 3) Petal.Length&gt;=2.6 66 31 versicolor (0.00000 0.53030 0.46970) ## 6) Petal.Width&lt; 1.75 37 3 versicolor (0.00000 0.91892 0.08108) * ## 7) Petal.Width&gt;=1.75 29 1 virginica (0.00000 0.03448 0.96552) * 3.5.4 Custom resampling Sometimes it is necessary to perform resampling with custom splits. If you want to do that because you are coming from a specific modeling field, first take a look at the mlr3 extension packages to make sure your custom resampling method hasn’t been implemented already. If your custom resampling method is widely used in your field, feel welcome to integrate it into one of the existing mlr3 extension packages or create your own extension package. A manual resampling instance can be created using the &quot;custom&quot; template. resampling = rsmp(&quot;custom&quot;) resampling$instantiate(task, list(c(1:10, 51:60, 101:110)), list(c(11:20, 61:70, 111:120)) ) resampling$iters ## [1] 1 resampling$train_set(1) ## [1] 1 2 3 4 5 6 7 8 9 10 51 52 53 54 55 56 57 58 59 ## [20] 60 101 102 103 104 105 106 107 108 109 110 resampling$test_set(1) ## [1] 11 12 13 14 15 16 17 18 19 20 61 62 63 64 65 66 67 68 69 ## [20] 70 111 112 113 114 115 116 117 118 119 120 "],
["benchmarking.html", "3.6 Benchmarking", " 3.6 Benchmarking Comparing the performance of different learners on multiple tasks and/or different resampling schemes is a recurrent task. This operation is usually referred to as “benchmarking” in the field of machine-learning. mlr3 offers the benchmark() function for convenience. 3.6.1 Design Creation In mlr3 we require you to supply a “design” of your benchmark experiment. By “design” we essentially mean the matrix of settings you want to execute. A “design” consists of Task, Learner and Resampling. Here, we call benchmark() to perform a single holdout split on a single task and two learners. We use the benchmark_grid() function to create an exhaustive design and properly instantiate the resampling: library(data.table) design = benchmark_grid( tasks = tsk(&quot;iris&quot;), learners = list(lrn(&quot;classif.rpart&quot;), lrn(&quot;classif.featureless&quot;)), resamplings = rsmp(&quot;holdout&quot;) ) print(design) ## task learner resampling ## 1: &lt;TaskClassif&gt; &lt;LearnerClassifRpart&gt; &lt;ResamplingHoldout&gt; ## 2: &lt;TaskClassif&gt; &lt;LearnerClassifFeatureless&gt; &lt;ResamplingHoldout&gt; bmr = benchmark(design) Note that the holdout splits have been automatically instantiated for each row of the design. As a result, the rpart learner used a different training set than the featureless learner. However, for comparison of learners you usually want the learners to see the same splits into train and test sets. To overcome this issue, the resampling strategy needs to be manually instantiated before creating the design. While the interface of benchmark() allows full flexibility, the creation of such design tables can be tedious. Therefore, mlr3 provides a convenience function to quickly generate design tables and instantiate resampling strategies in an exhaustive grid fashion: benchmark_grid(). # get some example tasks tasks = lapply(c(&quot;german_credit&quot;, &quot;sonar&quot;), tsk) # get some learners and for all learners ... # * predict probabilities # * predict also on the training set library(mlr3learners) learners = c(&quot;classif.featureless&quot;, &quot;classif.rpart&quot;, &quot;classif.ranger&quot;, &quot;classif.kknn&quot;) learners = lapply(learners, lrn, predict_type = &quot;prob&quot;, predict_sets = c(&quot;train&quot;, &quot;test&quot;)) # compare via 3-fold cross validation resamplings = rsmp(&quot;cv&quot;, folds = 3) # create a BenchmarkDesign object design = benchmark_grid(tasks, learners, resamplings) print(design) ## task learner resampling ## 1: &lt;TaskClassif&gt; &lt;LearnerClassifFeatureless&gt; &lt;ResamplingCV&gt; ## 2: &lt;TaskClassif&gt; &lt;LearnerClassifRpart&gt; &lt;ResamplingCV&gt; ## 3: &lt;TaskClassif&gt; &lt;LearnerClassifRanger&gt; &lt;ResamplingCV&gt; ## 4: &lt;TaskClassif&gt; &lt;LearnerClassifKKNN&gt; &lt;ResamplingCV&gt; ## 5: &lt;TaskClassif&gt; &lt;LearnerClassifFeatureless&gt; &lt;ResamplingCV&gt; ## 6: &lt;TaskClassif&gt; &lt;LearnerClassifRpart&gt; &lt;ResamplingCV&gt; ## 7: &lt;TaskClassif&gt; &lt;LearnerClassifRanger&gt; &lt;ResamplingCV&gt; ## 8: &lt;TaskClassif&gt; &lt;LearnerClassifKKNN&gt; &lt;ResamplingCV&gt; 3.6.2 Execution and Aggregation of Results After the benchmark design is ready, we can directly call benchmark() # execute the benchmark bmr = benchmark(design) Note that we did not instantiate the resampling instance, but benchmark_grid() took care of it for us: Each resampling strategy is instantiated for each task during the construction of the exhaustive grid. After the benchmark, one can calculate and aggregate the performance with .$aggregate(): # measures: # * area under the curve (auc) on training # * area under the curve (auc) on test measures = list( msr(&quot;classif.auc&quot;, id = &quot;auc_train&quot;, predict_sets = &quot;train&quot;), msr(&quot;classif.auc&quot;, id = &quot;auc_test&quot;) ) bmr$aggregate(measures) ## nr resample_result task_id learner_id resampling_id iters ## 1: 1 &lt;ResampleResult&gt; german_credit classif.featureless cv 3 ## 2: 2 &lt;ResampleResult&gt; german_credit classif.rpart cv 3 ## 3: 3 &lt;ResampleResult&gt; german_credit classif.ranger cv 3 ## 4: 4 &lt;ResampleResult&gt; german_credit classif.kknn cv 3 ## 5: 5 &lt;ResampleResult&gt; sonar classif.featureless cv 3 ## 6: 6 &lt;ResampleResult&gt; sonar classif.rpart cv 3 ## 7: 7 &lt;ResampleResult&gt; sonar classif.ranger cv 3 ## 8: 8 &lt;ResampleResult&gt; sonar classif.kknn cv 3 ## auc_train auc_test ## 1: 0.5000 0.5000 ## 2: 0.8169 0.7040 ## 3: 0.9985 0.7902 ## 4: 0.9885 0.7134 ## 5: 0.5000 0.5000 ## 6: 0.9086 0.7204 ## 7: 1.0000 0.9361 ## 8: 0.9985 0.9414 Subsequently, we can aggregate the results further. For example, we might be interested which learner performed best over all tasks simultaneously. Simply aggregating the performances with the mean is usually not statistically sound. Instead, we calculate the rank statistic for each learner grouped by task, and then aggregate the calculated ranks grouped by learner. Since the AUC needs to be maximized, we multiply with \\(-1\\) so that the best learner gets a rank of 1. tab = bmr$aggregate(measures) ranks = tab[, .(learner_id, rank_train = rank(-auc_train), rank_test = rank(-auc_test)), by = task_id] print(ranks) ## task_id learner_id rank_train rank_test ## 1: german_credit classif.featureless 4 4 ## 2: german_credit classif.rpart 3 3 ## 3: german_credit classif.ranger 1 1 ## 4: german_credit classif.kknn 2 2 ## 5: sonar classif.featureless 4 4 ## 6: sonar classif.rpart 3 3 ## 7: sonar classif.ranger 1 2 ## 8: sonar classif.kknn 2 1 ranks[, .(mrank_train = mean(rank_train), mrank_test = mean(rank_test)), by = learner_id][order(mrank_test)] ## learner_id mrank_train mrank_test ## 1: classif.ranger 1 1.5 ## 2: classif.kknn 2 1.5 ## 3: classif.rpart 3 3.0 ## 4: classif.featureless 4 4.0 Unsurprisingly, the featureless learner is outperformed. 3.6.3 Converting specific benchmark objects to resample objects A BenchmarkResult object is essentially a collection of multiple ResampleResult objects. As these are stored in a column of the aggregated data.table(), we can easily extract them: tab = bmr$aggregate(measures) rr = tab[task_id == &quot;sonar&quot; &amp; learner_id == &quot;classif.ranger&quot;]$resample_result[[1]] print(rr) ## &lt;ResampleResult&gt; of 3 iterations ## * Task: sonar ## * Learner: classif.ranger ## * Warnings: 0 in 0 iterations ## * Errors: 0 in 0 iterations We can now investigate this resampling and even single resampling iterations using one of the approach shown in the previous section: measure = msr(&quot;classif.auc&quot;) rr$aggregate(measure) ## classif.auc ## 0.9361 # get the iteration with worst AUC perf = rr$score(measure) i = which.min(perf$classif.auc) # get the corresponding learner and train set print(rr$learners[[i]]) ## &lt;LearnerClassifRanger:classif.ranger&gt; ## * Model: - ## * Parameters: list() ## * Packages: ranger ## * Predict Type: prob ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: importance, multiclass, oob_error, twoclass, weights head(rr$resampling$train_set(i)) ## [1] 1 2 4 5 8 9 "],
["binary.html", "3.7 Binary classification", " 3.7 Binary classification Classification problems with a target variable containing only two classes are called “binary”. For such binary target variables, you can specify the positive class within the classification task object during task creation. If not explicitly set during construction, the positive class defaults to the first level of the target variable. # during construction data(&quot;Sonar&quot;, package = &quot;mlbench&quot;) task = TaskClassif$new(id = &quot;Sonar&quot;, Sonar, target = &quot;Class&quot;, positive = &quot;R&quot;) # switch positive class to level &#39;M&#39; task$positive = &quot;M&quot; 3.7.1 ROC Curve and Thresholds ROC Analysis – which stands for “receiver operating characteristics” – is a subfield of machine learning which studies the evaluation of binary prediction systems. We saw earlier that one can retrieve the confusion matrix of a Prediction by accessing the $confusion field: learner = lrn(&quot;classif.rpart&quot;, predict_type = &quot;prob&quot;) pred = learner$train(task)$predict(task) C = pred$confusion print(C) ## truth ## response M R ## M 95 10 ## R 16 87 The confusion matrix contains the counts of correct and incorrect class assignments, grouped by class labels. The columns illustrate the true (observed) labels and the rows display the predicted labels. The positive is always the first row or column in the confusion matrix. Thus, the element in \\(C_{11}\\) is the number of times our model predicted the positive class and was right about it. Analogously, the element in \\(C_{22}\\) is the number of times our model predicted the negative class and was also right about it. The elements on the diagonal are called True Positives (TP) and True Negatives (TN). The element \\(C_{12}\\) is the number of times we falsely predicted a positive label, and is called False Positives (FP). The element \\(C_{21}\\) is called False Negatives (FN). We can now normalize in rows and columns of the confusion matrix to derive several informative metrics: True Positive Rate (TPR): How many of the true positives did we predict as positive? True Negative Rate (TNR): How many of the true negatives did we predict as negative? Positive Predictive Value PPV: If we predict positive how likely is it a true positive? Negative Predictive Value NPV: If we predict negative how likely is it a true negative? Source: Wikipedia It is difficult to achieve a high TPR and low FPR in conjunction, so one uses them for constructing the ROC Curve. We characterize a classifier by its TPR and FPR values and plot them in a coordinate system. The best classifier lies on the top-left corner, while the worst classifier lies at the diogonal. Classifiers laying on the diagonal produce random labels (with different proportions). If each positive \\(x\\) will be randomly classified with 25% as “positive”, we get a TPR of 0.25. If we assign each negative \\(x\\) randomly to “positive” we get a FPR of 0.25. In practice, we should never obtain a classifier below the diagonal, as inverting the predicted labels will result in a reflection at the diagonal. A scoring classifier is a model which produces scores or probabilities, instead of discrete labels. Nearly all modern classifiers can do that. Thresholding flexibly converts measured probabilities to labels. Predict \\(1\\) (positive class) if \\(\\hat{f}(x) &gt; \\tau\\) else predict \\(0\\). Normally, one could use \\(\\tau = 0.5\\) to convert probabilities to labels, but for imbalanced or cost-sensitive situations another threshold could be more suitable. After thresholding, any metric defined on labels can be used. For mlr3 prediction objects, the ROC curve can easily be created using third party packages such as the precrec package: library(precrec) evaluated = evalmod( scores = pred$prob[, task$positive], label = pred$truth, posclass = task$positive ) # TPR vs FPR / Sensitivity vs (1 - Specificity) ggplot2::autoplot(evaluated, curvetype = &quot;ROC&quot;) # Precision vs Recall ggplot2::autoplot(evaluated, curvetype = &quot;PRC&quot;) 3.7.2 Threshold Tuning "],
["model-optim.html", "4 Model Optimization", " 4 Model Optimization Model Tuning Even though machine learning algorithms have default values set for their hyperparameters, these need to be changed by the user to achieve optimal performance on the given dataset. A manual selection of hyperparameter values is not recommended as this approach rarely leads to an optimal performance. This is why a data-driven optimization of hyperparameters (= tuning) should be conducted. In order to tune a machine learning algorithm, one has to specify: the search space the optimization algorithm (aka tuning method) an evaluation method, i.e., a resampling strategy and a performance measure In summary, the sub-chapter on tuning illustrates hyperparameter selection, how to pick an optimizing algorithm and how to automate tuning using mlr3. Feature Selection The second part of this chapter explains “feature selection”. The objective of feature selection is to fit the sparse dependent of a model on a subset of available data features in the most suitable manner. Feature selection can enhance the interpretability of the model, speed up model fitting and improve the learner performance by reducing noise in the data. Different approaches exist to identify the relevant features. The sub-chapter on feature selection introduces two distinct approaches: feature selection using filter algorithms feature selection using so called “wrapper methods” Nested Resampling In order to get a good estimate of generalization performance and avoid data leakage, both an outer (performance) and an inner (tuning/feature selection) resampling process are necessary. The third sub-section of this chapter will provide instructions on how to implement nested resampling in mlr3, accounting for both inner and outer resampling. "],
["tuning.html", "4.1 Hyperparameter Tuning", " 4.1 Hyperparameter Tuning Hyperparameter tuning is supported via the extension package mlr3tuning. The heart of mlr3tuning are the R6 classes TuningInstance: Describes the tuning problem and stores results. Tuner: Base class for implementations of tuning algorithms. 4.1.1 The TuningInstance Class The following sub-section examines the optimization of a simple classification tree on the Pima Indian Diabetes data set. task = tsk(&quot;pima&quot;) print(task) ## &lt;TaskClassif:pima&gt; (768 x 9) ## * Target: diabetes ## * Properties: twoclass ## * Features (8): ## - dbl (8): age, glucose, insulin, mass, pedigree, pregnant, pressure, ## triceps We use the classification tree from rpart and choose a subset of the hyperparameters we want to tune. This is often referred to as the “tuning space”. learner = lrn(&quot;classif.rpart&quot;) learner$param_set ## ParamSet: ## id class lower upper levels default value ## 1: minsplit ParamInt 1 Inf 20 ## 2: cp ParamDbl 0 1 0.01 ## 3: maxcompete ParamInt 0 Inf 4 ## 4: maxsurrogate ParamInt 0 Inf 5 ## 5: maxdepth ParamInt 1 30 30 ## 6: xval ParamInt 0 Inf 10 0 Here, we opt to tune two parameters: the complexity cp and the termination criterion minsplit. As the tuning space has to be bound, one has to set lower and upper bounds: library(paradox) tune_ps = ParamSet$new(list( ParamDbl$new(&quot;cp&quot;, lower = 0.001, upper = 0.1), ParamInt$new(&quot;minsplit&quot;, lower = 1, upper = 10) )) tune_ps ## ParamSet: ## id class lower upper levels default value ## 1: cp ParamDbl 0.001 0.1 &lt;NoDefault&gt; ## 2: minsplit ParamInt 1.000 10.0 &lt;NoDefault&gt; Next, we need to define how to evaluate the performance. For this, we need to choose a resampling strategy and a performance measure. hout = rsmp(&quot;holdout&quot;) measure = msr(&quot;classif.ce&quot;) Finally, one has to determine the budget available to solve this tuning instance. This is done by selecting one of the available Terminators: Terminate after a given time (TerminatorClockTime) Terminate after a given amount of iterations (TerminatorEvals) Terminate after a specific performance is reached (TerminatorPerfReached) A combination of the above in an ALL or ANY fashion, using TerminatorCombo For this short introduction, we grant a budget of 20 evaluations and then put everything together into a TuningInstance: library(mlr3tuning) evals20 = term(&quot;evals&quot;, n_evals = 20) instance = TuningInstance$new( task = task, learner = learner, resampling = hout, measures = measure, param_set = tune_ps, terminator = evals20 ) print(instance) ## &lt;TuningInstance&gt; ## * Task: &lt;TaskClassif:pima&gt; ## * Learner: &lt;LearnerClassifRpart:classif.rpart&gt; ## * Measures: classif.ce ## * Resampling: &lt;ResamplingHoldout&gt; ## * Terminator: &lt;TerminatorEvals&gt; ## * bm_args: list() ## ParamSet: ## id class lower upper levels default value ## 1: cp ParamDbl 0.001 0.1 &lt;NoDefault&gt; ## 2: minsplit ParamInt 1.000 10.0 &lt;NoDefault&gt; ## Archive: ## Empty data.table (0 rows and 11 cols): nr,batch_nr,resample_result,task_id,learner_id,resampling_id... To start the tuning, we still need to select how the optimization should take place - in other words, we need to choose the optimization algorithm via the Tuner class. 4.1.2 The Tuner Class The following algorithms are currently implemented in mlr3tuning: Grid Search (TunerGridSearch) Random Search (TunerRandomSearch) (Bergstra and Bengio 2012) Generalized Simulated Annealing (TunerGenSA) In this example we will use a simple grid search with a grid resolution of 10: tuner = tnr(&quot;grid_search&quot;, resolution = 5) Since we have only numeric parameters, TunerGridSearch will create a grid of equally-sized steps between the respective upper and lower bounds. As we have two hyperparameters with a resolution of 5, the two-dimensional grid consists of \\(5^2 = 25\\) configurations. Each configuration serves as hyperparameter setting for the classification tree and triggers a 3-fold cross validation on the task. All configurations will be examined by the tuner (in a random order), until either all configurations are evaluated or the Terminator signals that the budget is exhausted. 4.1.3 Triggering the Tuning To start the tuning, we simply pass the TuningInstance to the $tune() method of the initialized Tuner. The tuner proceeds as follow: The Tuner proposes at least one hyperparameter configuration (the Tuner and may propose multiple points to improve parallelization, which can be controlled via the setting batch_size). For each configuration, a Learner is fitted on Task using the provided Resampling. The results are combined with other results from previous iterations to a single BenchmarkResult. The Terminator is queried if the budget is exhausted. If the budget is not exhausted, restart with 1) until it is. Determine the configuration with the best observed performance. Return a named list with the hyperparameter settings (&quot;values&quot;) and the corresponding measured performance (&quot;performance&quot;). result = tuner$tune(instance) print(result) ## NULL We can investigate all resamplings which where undertaken, using the $archive() method of the TuningInstance. Here, one just extracts the performance values and the hyperparameters: instance$archive(unnest = &quot;params&quot;)[, c(&quot;cp&quot;, &quot;minsplit&quot;, &quot;classif.ce&quot;)] ## cp minsplit classif.ce ## 1: 0.07525 3 0.3008 ## 2: 0.10000 10 0.3008 ## 3: 0.05050 5 0.3008 ## 4: 0.10000 3 0.3008 ## 5: 0.02575 1 0.2734 ## 6: 0.00100 8 0.3438 ## 7: 0.07525 1 0.3008 ## 8: 0.00100 1 0.3281 ## 9: 0.02575 3 0.2734 ## 10: 0.05050 8 0.3008 ## 11: 0.02575 10 0.2734 ## 12: 0.00100 3 0.3125 ## 13: 0.07525 8 0.3008 ## 14: 0.00100 10 0.3281 ## 15: 0.05050 1 0.3008 ## 16: 0.05050 10 0.3008 ## 17: 0.07525 5 0.3008 ## 18: 0.02575 8 0.2734 ## 19: 0.05050 3 0.3008 ## 20: 0.02575 5 0.2734 In total, the grid search evaluated 20/25 different configurations of the grid in a random order before the Terminator stopped the tuning. Now the optimized hyperparameters can take the previously created Learner, set the returned hyperparameters and train it on the full dataset. learner$param_set$values = instance$result$params learner$train(task) The trained model could now be used to make a prediction on external data. Note that predicting on observations present in the task, is statistically bias and should be avoided, as the model has seen these observations already during tuning. Hence, the resulting performance measure would be over-optimistic. Instead, to get unbiased performance estimates for the current task, nested resampling is required. 4.1.4 Automating the Tuning The AutoTuner wraps a learner and augments it with an automatic tuning for a given set of hyperparameters. Because the AutoTuner itself inherits from the Learner base class, it can be used like any other learner. Analogously to the previous subsection, a new classification tree learner is created. This classification tree learner automatically tunes the parameters cp and minsplit using an inner resampling (holdout). We create a terminator which allows 10 evaluations, and use a simple random search as tuning algorithm: library(paradox) library(mlr3tuning) learner = lrn(&quot;classif.rpart&quot;) resampling = rsmp(&quot;holdout&quot;) measures = msr(&quot;classif.ce&quot;) tune_ps = ParamSet$new(list( ParamDbl$new(&quot;cp&quot;, lower = 0.001, upper = 0.1), ParamInt$new(&quot;minsplit&quot;, lower = 1, upper = 10) )) terminator = term(&quot;evals&quot;, n_evals = 10) tuner = tnr(&quot;random_search&quot;) at = AutoTuner$new( learner = learner, resampling = resampling, measures = measures, tune_ps = tune_ps, terminator = terminator, tuner = tuner ) at ## &lt;AutoTuner:classif.rpart.tuned&gt; ## * Model: - ## * Parameters: xval=0 ## * Packages: rpart ## * Predict Type: response ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: importance, missings, multiclass, selected_features, ## twoclass, weights We can now use the learner like any other learner, calling the $train() and $predict() method. This time however, we pass it to benchmark() to compare the tuner to a classification tree without tuning. This way, the AutoTuner will do its resampling for tuning on the training set of the respective split of the outer resampling. The learner then predicts using the test set of the outer resampling. This yields unbiased performance measures, as the observations in the test set have not been used during tuning or fitting of the respective learner. This is called nested resampling. To compare the tuned learner with the learner using its default, we can use benchmark(): grid = benchmark_grid( task = tsk(&quot;pima&quot;), learner = list(at, lrn(&quot;classif.rpart&quot;)), resampling = rsmp(&quot;cv&quot;, folds = 3) ) bmr = benchmark(grid) bmr$aggregate(measures) ## nr resample_result task_id learner_id resampling_id iters ## 1: 1 &lt;ResampleResult&gt; pima classif.rpart.tuned cv 3 ## 2: 2 &lt;ResampleResult&gt; pima classif.rpart cv 3 ## classif.ce ## 1: 0.2734 ## 2: 0.2552 Note that we do not expect any differences here compared to the non-tuned approach for multiple reasons: the task is too easy the task is rather small, and thus prone to overfitting the tuning budget (10 evaluations) is small rpart does not benefit that much from tuning References "],
["fs.html", "4.2 Feature Selection / Filtering", " 4.2 Feature Selection / Filtering Often, data sets include a large number of features. The technique of extracting a subset of relevant features is called “feature selection”. The objective of feature selection is to fit the sparce dependent of a model on a subset of available data features in the most suitable manner. Feature selection can enhance the interpretability of the model, speed up the learning process and improve the learner performance. Different approaches exist to identify the relevant features. In the literature two different approaches exist: One is called “Filtering” and the other approach is often referred to as “feature subset selection” or “wrapper methods”. What are the differences (Chandrashekar and Sahin 2014)? Filter: An external algorithm computes a rank of the variables (e.g. based on the correlation to the response). Then, features are subsetted by a certain criteria, e.g. an absolute number or a percentage of the number of variables. The selected features will then be used to fit a model (with optional hyperparameters selected by tuning). This calculation is usually cheaper than “feature subset selection” in terms of computation time. Feature subset selection: Here, no ranking of features is done. Features are selected by a (random) subset of the data. Then, a model is fitted and the performance is checked. This is done for a lot of feature combinations in a cross-validation (CV) setting and the best combination is reported. This method is very computational intense as a lot of models are fitted. Also, strictly all these models would need to be tuned before the performance is estimated which would require an additional nested level in a CV setting. After all this, the selected subset of features is again fitted (with optional hyperparameters selected by tuning). There is also a third approach which can be attributed to the “filter” family: The embedded feature-selection methods of some Learner. Read more about how to use these in section embedded feature-selection methods. Ensemble filters built upon the idea of stacking single filter methods. These are not yet implemented. All feature selection related functionality is implemented via the extension package mlr3filters. 4.2.1 Filters Filter methods assign an importance value to each feature. Based on these values the features can be ranked and a feature subset can be selected. There is a list of all implemented filter methods in the Appendix. 4.2.2 Calculating filter values Currently, only classification and regression tasks are supported. The first step it to create a new R object using the class of the desired filter method. Each object of class Filter has a .$calculate() method which calculates the filter values and ranks them in a descending order. library(mlr3filters) filter = FilterJMIM$new() task = tsk(&quot;iris&quot;) filter$calculate(task) as.data.table(filter) ## feature score ## 1: Sepal.Length 1.0401 ## 2: Petal.Width 0.9894 ## 3: Petal.Length 0.9881 ## 4: Sepal.Width 0.8314 Some filters support changing specific hyperparameters. This is done similar to setting hyperparameters of a Learner using .$param_set$values: filter_cor = FilterCorrelation$new() filter_cor$param_set ## ParamSet: ## id class lower upper ## 1: use ParamFct NA NA ## 2: method ParamFct NA NA ## levels ## 1: everything,all.obs,complete.obs,na.or.complete,pairwise.complete.obs ## 2: pearson,kendall,spearman ## default value ## 1: everything ## 2: pearson # change parameter &#39;method&#39; filter_cor$param_set$values = list(method = &quot;spearman&quot;) filter_cor$param_set ## ParamSet: ## id class lower upper ## 1: use ParamFct NA NA ## 2: method ParamFct NA NA ## levels ## 1: everything,all.obs,complete.obs,na.or.complete,pairwise.complete.obs ## 2: pearson,kendall,spearman ## default value ## 1: everything ## 2: pearson spearman Rather than taking the “long” R6 way to create a filter, there is also a built-in shorthand notation for filter creation filter = flt(&quot;cmim&quot;) filter ## &lt;FilterCMIM:cmim&gt; ## Task Types: classif, regr ## Task Properties: - ## Packages: praznik ## Feature types: integer, numeric, factor, ordered 4.2.3 Variable Importance Filters All Learner with the property “importance” come with integrated feature selection methods. You can find a list of all learners with this property in the Appendix. For some learners the desired filter method needs to be set during learner creation. For example, learner classif.ranger (in mlr3learners comes with multiple integrated methods. See the help page of ranger::ranger. To use method “impurity”, you need to set the filter method during construction. library(mlr3learners) lrn = lrn(&quot;classif.ranger&quot;, importance = &quot;impurity&quot;) Now you can use the mlr3filters::FilterImportance class for algorithm-embedded methods to filter a Task. library(mlr3learners) task = tsk(&quot;iris&quot;) filter = flt(&quot;importance&quot;, learner = lrn) filter$calculate(task) head(as.data.table(filter), 3) ## feature score ## 1: Petal.Width 45.413 ## 2: Petal.Length 42.675 ## 3: Sepal.Length 8.967 4.2.4 Ensemble Methods Work in progress :) 4.2.5 Wrapper Methods Work in progress :) - via package mlr3fswrap References "],
["nested-resampling.html", "4.3 Nested Resampling", " 4.3 Nested Resampling 4.3.1 Introduction In order to obtain unbiased performance estimates for learners, all parts of the model building (preprocessing and model selection steps) should be included in the resampling, i.e., repeated for every pair of training/test data. For steps that themselves require resampling like hyperparameter tuning or feature-selection (via the wrapper approach) this results in two nested resampling loops. The graphic above illustrates nested resampling for parameter tuning with 3-fold cross-validation in the outer and 4-fold cross-validation in the inner loop. In the outer resampling loop, we have three pairs of training/test sets. On each of these outer training sets parameter tuning is done, thereby executing the inner resampling loop. This way, we get one set of selected hyperparameters for each outer training set. Then the learner is fitted on each outer training set using the corresponding selected hyperparameters and its performance is evaluated on the outer test sets. In mlr3, you can get nested resampling for free without programming any looping by using the mlr3tuning::AutoTuner class. This works as follows: Generate a wrapped Learner via class mlr3tuning::AutoTuner or mlr3filters::AutoSelect (not yet implemented). Specify all required settings - see section “Automating the Tuning” for help. Call function resample() or benchmark() with the created Learner. You can freely combine different inner and outer resampling strategies. A common setup is prediction and performance evaluation on a fixed outer test set. This can be achieved by passing the Resampling strategy (rsmp(&quot;holdout&quot;)) as the outer resampling instance to either resample() or benchmark(). The inner resampling strategy could be a cross-validation one (rsmp(&quot;cv&quot;)) as the sizes of the outer training sets might differ. Per default, the inner resample description is instantiated once for every outer training set. Nested resampling is computationally expensive. For this reason in the examples shown below, we use relatively small search spaces and a low number of resampling iterations. In practice, you normally have to increase both. As this is computationally intensive you might want to have a look at section parallelization. 4.3.2 Execution To optimize hyperparameters or conduct features-selection in a nested resampling you need to create learners using either the AutoTuner class, or the mlr3filters::AutoSelect class (not yet implemented). We use the example from section “Automating the Tuning” and pipe the resulting learner into a resample() call. library(mlr3tuning) task = tsk(&quot;iris&quot;) learner = lrn(&quot;classif.rpart&quot;) resampling = rsmp(&quot;holdout&quot;) measures = msr(&quot;classif.ce&quot;) param_set = paradox::ParamSet$new( params = list(paradox::ParamDbl$new(&quot;cp&quot;, lower = 0.001, upper = 0.1))) terminator = term(&quot;evals&quot;, n_evals = 5) tuner = tnr(&quot;grid_search&quot;, resolution = 10) at = AutoTuner$new(learner, resampling, measures = measures, param_set, terminator, tuner = tuner) Now construct the resample() call: resampling_outer = rsmp(&quot;cv&quot;, folds = 3) rr = resample(task = task, learner = at, resampling = resampling_outer) 4.3.3 Evaluation With the created ResampleResult we can now inspect the executed resampling iterations more closely. See also section Resampling for more detailed information about ResampleResult objects. For example, we can query the aggregated performance result: rr$aggregate() ## classif.ce ## 0.06667 Check for any errors in the folds during execution (if there is not output, warnings or errors recorded, this is an empty data.table(): rr$errors ## Empty data.table (0 rows and 2 cols): iteration,msg Or take a look at the confusion matrix of the joined predictions: rr$prediction()$confusion ## truth ## response setosa versicolor virginica ## setosa 50 0 0 ## versicolor 0 45 5 ## virginica 0 5 45 "],
["pipelines.html", "5 Pipelines", " 5 Pipelines Work in progress :) "],
["technical.html", "6 Technical", " 6 Technical This chapter gives an overview about technical details of the mlr3 framework. At first, some details about Parallelization and the usage of the future are given. Parallelization refers to running multiple jobs simultaneously and is used to minimize necessary computer power. Section Database Backends describes how to work with database backends that mlr3 supports. Database backends can be helpful for large data processing which does not fit in memory or is stored natively in a database (e.g. sqlite). In section Parameters instructions are given how to define parameter sets for learners, how do sample parameters and apply parameter transformations. Last, we provide a transition guide for users of the old mlr who want to switch to mlr3. "],
["parallelization.html", "6.1 Parallelization", " 6.1 Parallelization Parralelization refers to the proccess of running mulitple jobs in parallel, simultanously. This process allows for significant savings in computing power. mlr3 uses the future backends for parallelization. Make sure you have installed the required packages future and future.apply: mlr3 is capable of parallelizing a variety of different scenarios. One of the most used cases is to parallelize the Resampling iterations. See Section Resampling for a detailed introduction to resampling. In the following section, we will use the spam task and a simple classification tree (&quot;classif.rpart&quot;) to showcase parallelization. We use the future package to parallelize the resampling by selecting a backend via the function future::plan(). We use the &quot;multiprocess&quot; backend here which uses threads on UNIX based systems and a “Socket” cluster on Windows. future::plan(&quot;multiprocess&quot;) task = tsk(&quot;spam&quot;) learner = lrn(&quot;classif.rpart&quot;) resampling = rsmp(&quot;subsampling&quot;) time = Sys.time() resample(task, learner, resampling) Sys.time() - time By default all CPUs of your machine are used unless you specify argument workers in future::plan(). On most systems you should see a decrease in the reported elapsed time. On some systems (e.g. Windows), the overhead for parallelization is quite large though. Therefore, it is advised to only enable parallelization for resamplings where each iteration runs at least 10s. Choosing the parallelization level If you have are transitioning from mlr, you might be used to selecting different parallelization levels, e.g. for resampling, benchmarking or tuning. In mlr3 this is no longer required All kind of events are rolled out on the same level - there is no need to decide whether you want to parallelize the tuning OR the resampling. Just lean back and let the machine do the work :-) "],
["error-handling.html", "6.2 Error Handling", " 6.2 Error Handling To demonstrate how to properly deal with misbehaving learners, mlr3 ships with the learner classif.debug: task = tsk(&quot;iris&quot;) learner = lrn(&quot;classif.debug&quot;) print(learner) ## &lt;LearnerClassifDebug:classif.debug&gt; ## * Model: - ## * Parameters: list() ## * Packages: - ## * Predict Type: response ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: missings, multiclass, twoclass This learner comes with special hyperparameters that let us control what conditions should be signaled (message, warning, error, segfault) with what probability, during which stage the conditions should be signaled (train or predict), and the ratio of predictions being NA (predict_missing). learner$param_set ## ParamSet: ## id class lower upper levels default value ## 1: message_train ParamDbl 0 1 0 ## 2: message_predict ParamDbl 0 1 0 ## 3: warning_train ParamDbl 0 1 0 ## 4: warning_predict ParamDbl 0 1 0 ## 5: error_train ParamDbl 0 1 0 ## 6: error_predict ParamDbl 0 1 0 ## 7: segfault_train ParamDbl 0 1 0 ## 8: segfault_predict ParamDbl 0 1 0 ## 9: predict_missing ParamDbl 0 1 0 ## 10: save_tasks ParamLgl NA NA TRUE,FALSE FALSE ## 11: x ParamDbl 0 1 &lt;NoDefault&gt; With the learner’s default settings, the learner will do nothing special: The learner learns a random label and creates constant predictions. task = tsk(&quot;iris&quot;) learner$train(task)$predict(task)$confusion ## truth ## response setosa versicolor virginica ## setosa 0 0 0 ## versicolor 0 0 0 ## virginica 50 50 50 We now set a hyperparameter to let the debug learner signal an error during the train step. By default,mlr3 does not catch conditions such as warnings or errors raised by third-party code like learners: learner$param_set$values = list(error_train = 1) learner$train(tsk(&quot;iris&quot;)) ## Error in learner$train_internal(task = task): Error from classif.debug-&gt;train() If this would be a regular learner, we could now start debugging with traceback() (or create a MRE to file a bug report). However, machine learning algorithms raising errors is not uncommon as algorithms typically cannot process all possible data. Thus, we need a mechanism to capture all signaled conditions such as messages, warnings and errors so that we can analyze them post-hoc, and a statistically sound way to proceed the calculation and be able to aggregate over partial results. These two mechanisms are explained in the following subsections. 6.2.1 Encapsulation With encapsulation, exceptions do not stop the program flow and all output is logged to the learner (instead of printed to the console). Each Learner has a field encapsulate to control how the train or predict steps are executed. One way to encapsulate the execution is provided by the package evaluate (see encapsulate() for more details): task = tsk(&quot;iris&quot;) learner = lrn(&quot;classif.debug&quot;) learner$param_set$values = list(warning_train = 1, error_train = 1) learner$encapsulate = c(train = &quot;evaluate&quot;, predict = &quot;evaluate&quot;) learner$train(task) After training the learner, one can access the recorded log via the fields log, warnings and errors: learner$log ## stage class msg ## 1: train warning Warning from classif.debug-&gt;train() ## 2: train error Error from classif.debug-&gt;train() learner$warnings ## [1] &quot;Warning from classif.debug-&gt;train()&quot; learner$errors ## [1] &quot;Error from classif.debug-&gt;train()&quot; Another method for encapsulation is implemented in the callr package. callr spawns a new R process to execute the respective step, and thus even guards the current session from segfaults. On the downside, starting new processes comes with a computational overhead. learner$encapsulate = c(train = &quot;callr&quot;, predict = &quot;callr&quot;) learner$param_set$values = list(segfault_train = 1) learner$train(task = task) learner$errors ## [1] &quot;callr process exited with status -11&quot; Without a model, it is not possible to get predictions though: learner$predict(task) ## Error: Cannot predict, Learner &#39;classif.debug&#39; has not been trained yet To handle the missing predictions in a graceful way during resample() or benchmark(), fallback learners are introduced next. 6.2.2 Fallback learners Fallback learners have the purpose to allow scoring results in cases where a Learner is misbehaving in some sense. Some typical examples include: The learner fails to fit a model during training, e.g., if some convergence criterion is not met or the learner ran out of memory. The learner fails to predict for some or all observations. A typical case is e.g. new factor levels in the test data. We first handle the most common case that a learner completely breaks while fitting a model or while predicting on new data. If the learner fails in either of these two steps, we rely on a second learner to generate predictions: the fallback learner. In the next example, in addition to the debug learner, we attach a simple featureless learner to the debug learner. So whenever the debug learner fails (which is every time with the given parametrization) and encapsulation in enabled, mlr3 falls back to the predictions of the featureless learner internally: task = tsk(&quot;iris&quot;) learner = lrn(&quot;classif.debug&quot;) learner$param_set$values = list(error_train = 1) learner$encapsulate = c(train = &quot;evaluate&quot;) learner$fallback = lrn(&quot;classif.featureless&quot;) learner$train(task) learner ## &lt;LearnerClassifDebug:classif.debug&gt; ## * Model: - ## * Parameters: error_train=1 ## * Packages: - ## * Predict Type: response ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: missings, multiclass, twoclass ## * Errors: Error from classif.debug-&gt;train() Note that the log contains the captured error (which is also included in the print output), and although we don’t have a model, we can still get predictions: learner$model ## NULL prediction = learner$predict(task) prediction$score() ## classif.ce ## 0.6667 While the fallback learner is of limited use for this stepwise train-predict procedure, it is invaluable for larger benchmark studies where only few resampling iterations are failing. Here, we need to replace the missing scores with a number in order to aggregate over all resampling iterations. And imputing a number which is equivalent to guessing labels often seems to be the right amount of penalization. In the following snippet we compare the previously created debug learner with a simple classification tree. We re-parametrize the debug learner to fail in roughly 30% of the resampling iterations during the training step: learner$param_set$values = list(error_train = 0.3) bmr = benchmark(benchmark_grid(tsk(&quot;iris&quot;), list(learner, lrn(&quot;classif.rpart&quot;)), rsmp(&quot;cv&quot;))) aggr = bmr$aggregate(conditions = TRUE) aggr ## nr resample_result task_id learner_id resampling_id iters warnings ## 1: 1 &lt;ResampleResult&gt; iris classif.debug cv 10 0 ## 2: 2 &lt;ResampleResult&gt; iris classif.rpart cv 10 0 ## errors classif.ce ## 1: 2 0.66667 ## 2: 0 0.06667 To further investigate the errors, we can extract the ResampleResult: rr = aggr[learner_id == &quot;classif.debug&quot;]$resample_result[[1L]] rr$errors ## iteration msg ## 1: 3 Error from classif.debug-&gt;train() ## 2: 9 Error from classif.debug-&gt;train() A similar yet different problem emerges when a learner predicts only a subset of the observations in the test set (and predicts NA for others). Handling such predictions in a statistically sound way is not straight-forward and a common source for over-optimism when reporting results. Imagine that our goal is to benchmark two algorithms using a 10-fold cross validation on some binary classification task: Algorithm A is a ordinary logistic regression. Algorithm B is also a ordinary logistic regression, but with a twist: If the logistic regression is rather certain about the predicted label (&gt; 90% probability), it returns the label and a missing value otherwise. When comparing the performance of these two algorithms, it is obviously not fair to average over all predictions of algorithm A while only average over the “easy-to-predict” observations for algorithm B. By doing so, algorithm B would easily outperform algorithm A, but you have not factored in that you can not generate predictions for many observations. On the other hand, it is also not feasible to exclude all observations from the test set of a benchmark study where at least one algorithm failed to predict a label. Instead, we proceed by imputing all missing predictions with something naive, e.g., by predicting the majority class with a featureless learner. And as the majority class may depend on the resampling split (or we opt for some other arbitrary baseline learner), it is best to just train a second learner on the same resampling split. Long story short, if a fallback learner is involved, missing predictions of the base learner will be automatically replaced with predictions from the fallback learner. This is illustrated in the following example: task = tsk(&quot;iris&quot;) learner = lrn(&quot;classif.debug&quot;) # this hyperparameter sets the ratio of missing predictions learner$param_set$values = list(predict_missing = 0.5) # without fallback p = learner$train(task)$predict(task) table(p$response, useNA = &quot;always&quot;) ## ## setosa versicolor virginica &lt;NA&gt; ## 75 0 0 75 # with fallback learner$fallback = lrn(&quot;classif.featureless&quot;) p = learner$train(task)$predict(task) table(p$response, useNA = &quot;always&quot;) ## ## setosa versicolor virginica &lt;NA&gt; ## 75 75 0 0 Summed up, by combining encapsulation and fallback learners, it is possible to benchmark even quite unreliable or instable learning algorithms in a convenient way. "],
["backends.html", "6.3 Database Backends", " 6.3 Database Backends In mlr3, Tasks store their data in an abstract data format, the DataBackend. The default backend uses data.table via the DataBackendDataTable as an in-memory data base. For larger data, or when working with many tasks in parallel, it can be advantageous to interface an out-of-memory data. We use the excellent R package dbplyr which extends dplyr to work on many popular data bases like MariaDB, PostgreSQL or SQLite. 6.3.1 Example Data To generate a halfway realistic scenario, we use the NYC flights data set from package nycflights13: # load data requireNamespace(&quot;DBI&quot;) ## Loading required namespace: DBI requireNamespace(&quot;RSQLite&quot;) ## Loading required namespace: RSQLite requireNamespace(&quot;nycflights13&quot;) ## Loading required namespace: nycflights13 data(&quot;flights&quot;, package = &quot;nycflights13&quot;) str(flights) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 336776 obs. of 19 variables: ## $ year : int 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ... ## $ month : int 1 1 1 1 1 1 1 1 1 1 ... ## $ day : int 1 1 1 1 1 1 1 1 1 1 ... ## $ dep_time : int 517 533 542 544 554 554 555 557 557 558 ... ## $ sched_dep_time: int 515 529 540 545 600 558 600 600 600 600 ... ## $ dep_delay : num 2 4 2 -1 -6 -4 -5 -3 -3 -2 ... ## $ arr_time : int 830 850 923 1004 812 740 913 709 838 753 ... ## $ sched_arr_time: int 819 830 850 1022 837 728 854 723 846 745 ... ## $ arr_delay : num 11 20 33 -18 -25 12 19 -14 -8 8 ... ## $ carrier : chr &quot;UA&quot; &quot;UA&quot; &quot;AA&quot; &quot;B6&quot; ... ## $ flight : int 1545 1714 1141 725 461 1696 507 5708 79 301 ... ## $ tailnum : chr &quot;N14228&quot; &quot;N24211&quot; &quot;N619AA&quot; &quot;N804JB&quot; ... ## $ origin : chr &quot;EWR&quot; &quot;LGA&quot; &quot;JFK&quot; &quot;JFK&quot; ... ## $ dest : chr &quot;IAH&quot; &quot;IAH&quot; &quot;MIA&quot; &quot;BQN&quot; ... ## $ air_time : num 227 227 160 183 116 150 158 53 140 138 ... ## $ distance : num 1400 1416 1089 1576 762 ... ## $ hour : num 5 5 5 5 6 5 6 6 6 6 ... ## $ minute : num 15 29 40 45 0 58 0 0 0 0 ... ## $ time_hour : POSIXct, format: &quot;2013-01-01 05:00:00&quot; &quot;2013-01-01 05:00:00&quot; ... # add column of unique row ids flights$row_id = 1:nrow(flights) # create sqlite database in temporary file path = tempfile(&quot;flights&quot;, fileext = &quot;.sqlite&quot;) con = DBI::dbConnect(RSQLite::SQLite(), path) tbl = DBI::dbWriteTable(con, &quot;flights&quot;, as.data.frame(flights)) DBI::dbDisconnect(con) 6.3.2 Preprocessing with dplyr With the SQLite database in path, we now re-establish a connection and switch to dplyr/dbplyr for some essential preprocessing. # establish connection con = DBI::dbConnect(RSQLite::SQLite(), path) # select the &quot;flights&quot; table, enter dplyr library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:data.table&#39;: ## ## between, first, last ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(dbplyr) ## ## Attaching package: &#39;dbplyr&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## ident, sql tbl = tbl(con, &quot;flights&quot;) First, we select a subset of columns to work on: keep = c(&quot;row_id&quot;, &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;dep_time&quot;, &quot;arr_time&quot;, &quot;carrier&quot;, &quot;flight&quot;, &quot;air_time&quot;, &quot;distance&quot;, &quot;arr_delay&quot;) tbl = select(tbl, keep) Additionally, we remove those observations where the arrival delay (arr_delay) has a missing value: tbl = filter(tbl, !is.na(arr_delay)) To keep runtime reasonable for this toy example, we filter the data to only use every second row: tbl = filter(tbl, row_id %% 2 == 0) The factor levels of the feature carrier are merged so that infrequent carriers are replaced by level “other”: tbl = mutate(tbl, carrier = case_when( carrier %in% c(&quot;OO&quot;, &quot;HA&quot;, &quot;YV&quot;, &quot;F9&quot;, &quot;AS&quot;, &quot;FL&quot;, &quot;VX&quot;, &quot;WN&quot;) ~ &quot;other&quot;, TRUE ~ carrier) ) 6.3.3 DataBackendDplyr The processed table is now used to create a mlr3db::DataBackendDplyr from mlr3db: library(&quot;mlr3db&quot;) b = as_data_backend(tbl, primary_key = &quot;row_id&quot;) We can now use the interface of mlr3::DataBackend to query some basic information of the data: b$nrow ## [1] 163707 b$ncol ## [1] 13 b$head() ## row_id year month day hour minute dep_time arr_time carrier flight air_time ## 1: 2 2013 1 1 5 29 533 850 UA 1714 227 ## 2: 4 2013 1 1 5 45 544 1004 B6 725 183 ## 3: 6 2013 1 1 5 58 554 740 UA 1696 150 ## 4: 8 2013 1 1 6 0 557 709 EV 5708 53 ## 5: 10 2013 1 1 6 0 558 753 AA 301 138 ## 6: 12 2013 1 1 6 0 558 853 B6 71 158 ## distance arr_delay ## 1: 1416 20 ## 2: 1576 -18 ## 3: 719 12 ## 4: 229 -14 ## 5: 733 8 ## 6: 1005 -3 Note that the DataBackendDplyr does not know about any rows or columns we have filtered out with dplyr before, it just operates on the view we provided. 6.3.4 Model fitting We create the following mlr3 objects: A regression task, based on the previously created mlr3db::DataBackendDplyr. A regression learner (regr.rpart). A resampling strategy: 3 times repeated subsampling using 2% of the observations for training (“subsampling”) Measures “mse”, “time_predict” and “time_predict” task = TaskRegr$new(&quot;flights_sqlite&quot;, b, target = &quot;arr_delay&quot;) learner = lrn(&quot;regr.rpart&quot;) measures = mlr_measures$mget(c(&quot;regr.mse&quot;, &quot;time_train&quot;, &quot;time_predict&quot;)) resampling = rsmp(&quot;subsampling&quot;) resampling$param_set$values = list(repeats = 3, ratio = 0.02) We pass all these objects to resample() to perform a simple resampling with three iterations. In each iteration, only the required subset of the data is queried from the SQLite data base and passed to rpart::rpart(): rr = resample(task, learner, resampling) print(rr) ## &lt;ResampleResult&gt; of 3 iterations ## * Task: flights_sqlite ## * Learner: regr.rpart ## * Warnings: 0 in 0 iterations ## * Errors: 0 in 0 iterations rr$aggregate(measures) ## regr.mse time_train time_predict ## 1279.8340 0.1843 2.1587 6.3.5 Cleanup Finally, we remove the tbl object and close the connection. rm(tbl) DBI::dbDisconnect(con) "],
["paradox.html", "6.4 Parameters (using paradox)", " 6.4 Parameters (using paradox) The paradox package offers a language for the description of parameter spaces, as well as tools for useful operations on these parameter spaces. A parameter space is often useful when describing a set of sensible input values for an R function, the set of possible values that slots of a configuration object can take, or the search space of an optimization process. The tools provided by paradox therefore relate to - Parameter checking: Verifying that a set of parameters satisfies the conditions of a parameter space and - Parameter sampling: Generating parameter values that lie in the parameter space for systematic exploration of program behavior depending on these parameters. paradox is, by its nature, an auxiliary package that derives its usefulness from other packages that make use of it. It is heavily utilized in other mlr-org packages such as mlr3, mlr3pipelines, and mlr3tuning. 6.4.1 Reference Based Objects paradox is the spiritual successor to the ParamHelpers package and was written from scratch using the R6 class system. The most important consequence of this is that all objects created in paradox are “reference-based”, unlike most other objects in R. When a change is made to a ParamSet object, for example by adding a parameter using the $add() function, all variables that point to this ParamSet will contain the changed object. To create an independent copy of a ParamSet, the $clone() method needs to be used: library(&quot;paradox&quot;) ps = ParamSet$new() ps2 = ps ps3 = ps$clone(deep = TRUE) print(ps) # the same for ps2 and ps3 ## ParamSet: ## Empty. ps$add(ParamLgl$new(&quot;a&quot;)) print(ps) # ps was changed ## ParamSet: ## id class lower upper levels default value ## 1: a ParamLgl NA NA TRUE,FALSE &lt;NoDefault&gt; print(ps2) # contains the same reference as ps ## ParamSet: ## id class lower upper levels default value ## 1: a ParamLgl NA NA TRUE,FALSE &lt;NoDefault&gt; print(ps3) # is a &quot;clone&quot; of the old (empty) ps ## ParamSet: ## Empty. 6.4.2 Defining a Parameter Space 6.4.2.1 Single Parameters The basic building block for describing parameter spaces is the Param class. It represents a single parameter, which usually can take a single atomic value. Consider, for example, trying to configure the rpart package’s rpart.control object. It has various components (minsplit, cp, …) that all take a single value, and that would all be represented by a different instance of a Param object. The Param class has various subclasses that represent different value types: ParamInt: Integer numbers ParamDbl: Real numbers ParamFct: String values from a set of possible values, similar to R factors ParamLgl: Truth values (TRUE / FALSE), as logicals in R ParamUty: Parameter that can take any value A particular instance of a parameter is created by calling the attached $new() function: library(&quot;paradox&quot;) parA = ParamLgl$new(id = &quot;A&quot;) parB = ParamInt$new(id = &quot;B&quot;, lower = 0, upper = 10, tags = c(&quot;tag1&quot;, &quot;tag2&quot;)) parC = ParamDbl$new(id = &quot;C&quot;, lower = 0, upper = 4, special_vals = list(NULL)) parD = ParamFct$new(id = &quot;D&quot;, levels = c(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;), default = &quot;y&quot;) parE = ParamUty$new(id = &quot;E&quot;, custom_check = function(x) checkmate::checkFunction(x)) Every parameter must have an id—its name within the parameter set—, and may also have a default value (default), a list of values that are accepted even if they do not conform to the type (special_vals). tags that can be used to organize parameters. The numeric (Int and Dbl) parameters furthermore allow for specification of a lower and upper bound, while the Fct parameter must be given a vector of levels that define the possible states its parameter can take. The Uty parameter can also have a custom_check function that must return TRUE when a value is acceptable and may return a character(1) error description otherwise. The example above defines parE as a parameter that only accepts functions. All values which are given to the constructor are then accessible from the object for inspection using $. Although all these values can be changed for a parameter after construction, this can be a bad idea and should be avoided when possible. Instead, a new parameter should be constructed. Besides the possible values that can be given to a constructor, there are also the $class, $nlevels, $is_bounded, $has_default, $storage_type, $is_number and $is_categ slots that give information about a parameter. A list of all slots can be found in ?Param. parB$lower ## [1] 0 parA$levels ## [1] TRUE FALSE parE$class ## [1] &quot;ParamUty&quot; It is also possible to get all information of a Param as data.table by calling as.data.table. as.data.table(parA) ## id class lower upper levels nlevels is_bounded special_vals default storage_type tags ## 1: A ParamLgl NA NA TRUE,FALSE 2 TRUE &lt;list&gt; &lt;NoDefault&gt; logical 6.4.2.1.1 Type / Range Checking A Param object offers the possibility to check whether a value satisfies its condition, i.e. is of the right type, and also falls within the range of allowed values, using the $test(), $check(), and $assert() functions. test() should be used within conditional checks and returns TRUE or FALSE, while check() returns an error description when a value does not conform to the parameter (and thus plays well with the checkmate::assert() function). assert() will throw an error whenever a value does not fit. parA$test(FALSE) ## [1] TRUE parA$test(&quot;FALSE&quot;) ## [1] FALSE parA$check(&quot;FALSE&quot;) ## [1] &quot;Must be of type &#39;logical flag&#39;, not &#39;character&#39;&quot; Instead of testing single parameters, it is often more convenient to check a whole set of parameters using a ParamSet. 6.4.2.2 Parameter Sets The ordered collection of parameters is handled in a ParamSet1. It is initialized using the $new() function and optionally takes a list of Params as argument. Parameters can also be added to the constructed ParamSet using the $add() function. It is even possible to add whole ParamSets to other ParamSets. ps = ParamSet$new(list(parA, parB)) ps$add(parC) ps$add(ParamSet$new(list(parD, parE))) print(ps) ## ParamSet: ## id class lower upper levels default value ## 1: A ParamLgl NA NA TRUE,FALSE &lt;NoDefault&gt; ## 2: B ParamInt 0 10 &lt;NoDefault&gt; ## 3: C ParamDbl 0 4 &lt;NoDefault&gt; ## 4: D ParamFct NA NA x,y,z y ## 5: E ParamUty NA NA &lt;NoDefault&gt; The individual parameters can be accessed through the $params slot. It is also possible to get information about all parameters in a vectorized fashion using mostly the same slots as for individual Params (i.e. $class, $levels etc.), see ?ParamSet for details. It is possible to reduce ParamSets using the $subset method. Be aware that it modifies a ParamSet in-place, so a “clone” must be created first if the original ParamSet should not be modified. psSmall = ps$clone() psSmall$subset(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)) print(psSmall) ## ParamSet: ## id class lower upper levels default value ## 1: A ParamLgl NA NA TRUE,FALSE &lt;NoDefault&gt; ## 2: B ParamInt 0 10 &lt;NoDefault&gt; ## 3: C ParamDbl 0 4 &lt;NoDefault&gt; Just as for Params, and much more useful, it is possible to get the ParamSet as a data.table using as.data.table(). This makes it easy to subset parameters on certain conditions and aggregate information about them, using the variety of methods provided by data.table. as.data.table(ps) ## id class lower upper levels nlevels is_bounded special_vals default storage_type tags ## 1: A ParamLgl NA NA TRUE,FALSE 2 TRUE &lt;list&gt; &lt;NoDefault&gt; logical ## 2: B ParamInt 0 10 11 TRUE &lt;list&gt; &lt;NoDefault&gt; integer tag1,tag2 ## 3: C ParamDbl 0 4 Inf TRUE &lt;list&gt; &lt;NoDefault&gt; numeric ## 4: D ParamFct NA NA x,y,z 3 TRUE &lt;list&gt; y character ## 5: E ParamUty NA NA Inf FALSE &lt;list&gt; &lt;NoDefault&gt; list 6.4.2.2.1 Type / Range Checking Similar to individual Params, the ParamSet provides $test(), $check() and $assert() functions that allow for type and range checking of parameters. Their argument must be a named list with values that are checked against the respective parameters. It is possible to check only a subset of parameters. ps$check(list(A = TRUE, B = 0, E = identity)) ## [1] TRUE ps$check(list(A = 1)) ## [1] &quot;A: Must be of type &#39;logical flag&#39;, not &#39;double&#39;&quot; ps$check(list(Z = 1)) ## [1] &quot;Parameter &#39;Z&#39; not available. Did you mean &#39;A&#39; / &#39;B&#39; / &#39;C&#39;?&quot; 6.4.2.2.2 Values in a ParamSet Although a ParamSet fundamentally represents a value space, it also has a slot $values that can contain a point within that space. This is useful because many things that define a parameter space need similar operations (like parameter checking) that can be simplified. The $values slot contains a named list that is always checked against parameter constraints. When trying to set parameter values, e.g. for mlr3 Learners, it is the $values slot of its $param_set that needs to be used. ps$values = list(A = TRUE, B = 0) ps$values$B = 1 print(ps$values) ## $A ## [1] TRUE ## ## $B ## [1] 1 The parameter constraints are automatically checked: ps$values$B = 100 ## Error in (function (xs) : Assertion on &#39;xs&#39; failed: B: Element 1 is not &lt;= 10. 6.4.2.2.3 Dependencies It is often the case that certain parameters are irrelevant or should not be given depending on values of other parameters. An example would be a parameter that switches a certain algorithm feature (for example regularization) on or off, combined with another parameter that controls the behavior of that feature (e.g. a regularization parameter). The second parameter would be said to depend on the first parameter having the value TRUE. A dependency can be added using the $add_dep method, which takes both the ids of the “depender” and “dependee” parameters as well as a Condition object. The Condition object represents the check to be performed on the “dependee”. Currently it can be created using CondEqual$new() and CondAnyOf$new(). Multiple dependencies can be added, and parameters that depend on others can again be depended on, as long as no cyclic dependencies are introduced. The consequence of dependencies are twofold: For one, the $check(), $test() and $assert() tests will not accept the presence of a parameter if its dependency is not met. Furthermore, when sampling or creating grid designs from a ParamSet, the dependencies will be respected (see Parameter Sampling, in particular Hierarchical Sampler). The following example makes parameter D depend on parameter A being FALSE, and parameter B depend on parameter D being one of &quot;x&quot; or &quot;y&quot;. This introduces an implicit dependency of B on A being FALSE as well, because D does not take any value if A is TRUE. ps$add_dep(&quot;D&quot;, &quot;A&quot;, CondEqual$new(FALSE)) ps$add_dep(&quot;B&quot;, &quot;D&quot;, CondAnyOf$new(c(&quot;x&quot;, &quot;y&quot;))) ps$check(list(A = FALSE, D = &quot;x&quot;, B = 1)) # OK: all dependencies met ## [1] TRUE ps$check(list(A = FALSE, D = &quot;z&quot;, B = 1)) # B&#39;s dependency is not met ## [1] &quot;Condition for &#39;B&#39; not ok: D anyof x, y; instead: D=z&quot; ps$check(list(A = FALSE, B = 1)) # B&#39;s dependency is not met ## [1] &quot;Condition for &#39;B&#39; not ok: D anyof x, y; instead: D=&lt;not-there&gt;&quot; ps$check(list(A = FALSE, D = &quot;z&quot;)) # OK: B is absent ## [1] TRUE ps$check(list(A = TRUE)) # OK: neither B nor D present ## [1] TRUE ps$check(list(A = TRUE, D = &quot;x&quot;, B = 1)) # D&#39;s dependency is not met ## [1] &quot;Condition for &#39;D&#39; not ok: A equal FALSE; instead: A=TRUE&quot; ps$check(list(A = TRUE, B = 1)) # B&#39;s dependency is not met ## [1] &quot;Condition for &#39;B&#39; not ok: D anyof x, y; instead: D=&lt;not-there&gt;&quot; Internally, the dependencies are represented as a data.table, which can be accessed listed in the $deps slot. This data.table can even be mutated, for example to remove dependencies. There are no sanity checks done when the $deps slot is changed this way, so be careful. ps$deps ## id on cond ## 1: D A &lt;CondEqual&gt; ## 2: B D &lt;CondAnyOf&gt; 6.4.2.3 Vector Parameters Unlike in the old ParamHelpers package, there are no more vectorial parameters in paradox. Instead, it is now possible to create multiple copies of a single parameter using the $rep function. This creates a ParamSet consisting of multiple copies of the parameter, which can then (optionally) be added to another ParamSet. ps2d = ParamDbl$new(&quot;x&quot;, lower = 0, upper = 1)$rep(2) print(ps2d) ## ParamSet: ## id class lower upper levels default value ## 1: x_rep_1 ParamDbl 0 1 &lt;NoDefault&gt; ## 2: x_rep_2 ParamDbl 0 1 &lt;NoDefault&gt; ps$add(ps2d) print(ps) ## ParamSet: ## id class lower upper levels default parents value ## 1: A ParamLgl NA NA TRUE,FALSE &lt;NoDefault&gt; TRUE ## 2: B ParamInt 0 10 &lt;NoDefault&gt; D 1 ## 3: C ParamDbl 0 4 &lt;NoDefault&gt; ## 4: D ParamFct NA NA x,y,z y A ## 5: E ParamUty NA NA &lt;NoDefault&gt; ## 6: x_rep_1 ParamDbl 0 1 &lt;NoDefault&gt; ## 7: x_rep_2 ParamDbl 0 1 &lt;NoDefault&gt; It is also possible to use a ParamUty to accept vectorial parameters, which also works for parameters of variable length. A ParamSet containing a ParamUty can be used for parameter checking, but not for sampling. To sample values for a method that needs a vectorial parameter, it is advised to use a parameter transformation function that creates a vector from atomic values. Assembling a vector from repeated parameters is aided by the parameter’s $tags: Parameters that were generated by the $rep() command automatically get tagged as belonging to a group of repeated parameters: ps$tags ## $A ## character(0) ## ## $B ## [1] &quot;tag1&quot; &quot;tag2&quot; ## ## $C ## character(0) ## ## $D ## character(0) ## ## $E ## character(0) ## ## $x_rep_1 ## [1] &quot;x_rep&quot; ## ## $x_rep_2 ## [1] &quot;x_rep&quot; 6.4.3 Parameter Sampling It is often useful to have a list of possible parameter values that can be systematically iterated through, for example to find parameter values for which an algorithm performs particularly well (tuning). paradox offers a variety of functions that allow creating evenly-spaced parameter values in a “grid” design as well as random sampling. In the latter case, it is possible to influence the sampling distribution in more or less fine detail. A point to always keep in mind while sampling is that only numerical and factorial parameters that are bounded can be sampled from, i.e. not ParamUty. Furthermore, for most samplers ParamInt and ParamDbl must have finite lower and upper bounds. 6.4.3.1 Parameter Designs Functions that sample the parameter space fundamentally return an object of the Design class. These objects contain the sampled data as a data.table under the $data slot, and also offer conversion to a list of parameter-values using the $transpose() function. 6.4.3.2 Grid Design The generate_design_grid() function is used to create grid designs that contain all combinations of parameter values: All possible values for ParamLgl and ParamFct, and values with a given resolution for ParamInt and ParamDbl. The resolution can be given for all numeric parameters, or for specific named parameters through the param_resolutions parameter. design = generate_design_grid(psSmall, 2) print(design) ## &lt;Design&gt; with 8 rows: ## A B C ## 1: TRUE 0 0 ## 2: TRUE 0 4 ## 3: TRUE 10 0 ## 4: TRUE 10 4 ## 5: FALSE 0 0 ## 6: FALSE 0 4 ## 7: FALSE 10 0 ## 8: FALSE 10 4 generate_design_grid(psSmall, param_resolutions = c(B = 1, C = 2)) ## &lt;Design&gt; with 4 rows: ## B C A ## 1: 0 0 TRUE ## 2: 0 0 FALSE ## 3: 0 4 TRUE ## 4: 0 4 FALSE 6.4.3.3 Random Sampling paradox offers different methods for random sampling, which vary in the degree to which they can be configured. The easiest way to get a uniformly random sample of parameters is generate_design_random. It is also possible to create “latin hypercube” sampled parameter values using generate_design_lhs, which utilizes the lhs package. LHS-sampling creates low-discrepancy sampled values that cover the parameter space more evenly than purely random values. pvrand = generate_design_random(ps2d, 500) pvlhs = generate_design_lhs(ps2d, 500) 6.4.3.4 Generalized Sampling: The Sampler Class It may sometimes be desirable to configure parameter sampling in more detail. paradox uses the Sampler abstract base class for sampling, which has many different subclasses that can be parameterized and combined to control the sampling process. It is even possible to create further subclasses of the Sampler class (or of any of its subclasses) for even more possibilities. Every Sampler object has a sample() function, which takes one argument, the number of instances to sample, and returns a Design object. 6.4.3.4.1 1D-Samplers There is a variety of samplers that sample values for a single parameter. These are Sampler1DUnif (uniform sampling), Sampler1DCateg (sampling for categorical parameters), Sampler1DNormal (normally distributed sampling, truncated at parameter bounds), and Sampler1DRfun (arbitrary 1D sampling, given a random-function). These are initialized with a single Param, and can then be used to sample values. sampA = Sampler1DCateg$new(parA) sampA$sample(5) ## &lt;Design&gt; with 5 rows: ## A ## 1: TRUE ## 2: FALSE ## 3: TRUE ## 4: FALSE ## 5: TRUE 6.4.3.4.2 Hierarchical Sampler The SamplerHierarchical sampler is an auxiliary sampler that combines many 1D-Samplers to get a combined distribution. Its name “hierarchical” implies that it is able to respect parameter dependencies: Parameters only get sampled when their dependencies are met. The following example shows how this works: The Int parameter B depends on the Lgl parameter A being TRUE. A is sampled to be TRUE in about half the cases, in which case B takes a value between 0 and 10. In the cases where A is FALSE, B is set to NA. psSmall$add_dep(&quot;B&quot;, &quot;A&quot;, CondEqual$new(TRUE)) sampH = SamplerHierarchical$new(psSmall, list(Sampler1DCateg$new(parA), Sampler1DUnif$new(parB), Sampler1DUnif$new(parC)) ) sampled = sampH$sample(1000) table(sampled$data[, c(&quot;A&quot;, &quot;B&quot;)], useNA = &quot;ifany&quot;) ## B ## A 0 1 2 3 4 5 6 7 8 9 10 &lt;NA&gt; ## FALSE 0 0 0 0 0 0 0 0 0 0 0 509 ## TRUE 39 45 50 47 39 38 48 44 39 37 65 0 6.4.3.4.3 Joint Sampler Another way of combining samplers is the SamplerJointIndep. It also makes it possible to combine Samplers that are not 1D. However, it currently can not handle ParamSets with dependencies. sampJ = SamplerJointIndep$new( list(Sampler1DUnif$new(ParamDbl$new(&quot;x&quot;, 0, 1)), Sampler1DUnif$new(ParamDbl$new(&quot;y&quot;, 0, 1))) ) sampJ$sample(5) ## &lt;Design&gt; with 5 rows: ## x y ## 1: 0.4283 0.08542 ## 2: 0.7013 0.87994 ## 3: 0.2883 0.26482 ## 4: 0.7656 0.59845 ## 5: 0.6075 0.40976 6.4.3.4.4 SamplerUnif The Sampler used in generate_design_random is the SamplerUnif sampler, which corresponds to a HierarchicalSampler of Sampler1DUnif for all parameters. 6.4.4 Parameter Transformation While the different Samplers allow for a wide specification of parameter distributions, there are cases where the simplest way of getting a desired distribution is to sample parameters from a simple distribution (such as the uniform distribution) and then transform them. This can be done by assigning a function to the $trafo slot of a ParamSet. The $trafo function is called with two parameters: The list of parameter values to be transformed as x, and the ParamSet itself as param_set; it must return a list of transformed parameter values. The transformation is performed when calling the $transpose function of the Design object returned by a Sampler with the trafo ParamSet to TRUE (the default). The following, for example, creates a parameter that is exponentially distributed: psexp = ParamSet$new(list(ParamDbl$new(&quot;par&quot;, 0, 1))) psexp$trafo = function(x, param_set) { x$par = -log(x$par) x } design = generate_design_random(psexp, 2) print(design) ## &lt;Design&gt; with 2 rows: ## par ## 1: 0.1272 ## 2: 0.3775 design$transpose() # trafo is TRUE ## [[1]] ## [[1]]$par ## [1] 2.062 ## ## ## [[2]] ## [[2]]$par ## [1] 0.9742 Compare this to $transpose() without transformation: design$transpose(trafo = FALSE) ## [[1]] ## [[1]]$par ## [1] 0.1272 ## ## ## [[2]] ## [[2]]$par ## [1] 0.3775 6.4.4.1 Transformation between Types Usually the design created with one ParamSet is then used to configure other objects that themselves have a ParamSet which defines the values they take. The ParamSets which can be used for random sampling, however, are restricted in some ways: They must have finite bounds, and they may not contain “untyped” (ParamUty) parameters. $trafo provides the glue for these situations. There is relatively little constraint on the trafo function’s return value, so it is possible to return values that have different bounds or even types than the original ParamSet. It is even possible to remove some parameters and add new ones. Suppose, for example, that a certain method requires a function as a parameter, Let’s say a function that summarizes its data in a certain way. The user can pass functions like median() or mean(), but could also pass quantiles or something completely different. This method would probably use the following ParamSet: methodPS = ParamSet$new( list( ParamUty$new(&quot;fun&quot;, custom_check = function(x) checkmate::checkFunction(x, nargs = 1)) ) ) print(methodPS) ## ParamSet: ## id class lower upper levels default value ## 1: fun ParamUty NA NA &lt;NoDefault&gt; If one wanted to sample this method, using one of four functions, a way to do this would be samplingPS = ParamSet$new( list( ParamFct$new(&quot;fun&quot;, c(&quot;mean&quot;, &quot;median&quot;, &quot;min&quot;, &quot;max&quot;)) ) ) samplingPS$trafo = function(x, param_set) { # x$fun is a `character(1)`, # in particular one of &#39;mean&#39;, &#39;median&#39;, &#39;min&#39;, &#39;max&#39;. # We want to turn it into a function! x$fun = get(x$fun, mode = &quot;function&quot;) x } design = generate_design_random(samplingPS, 2) print(design) ## &lt;Design&gt; with 2 rows: ## fun ## 1: mean ## 2: min Note that the Design only contains the column “fun” as a character column. To get a single value as a function, the $transpose function is used. xvals = design$transpose() print(xvals[[1]]) ## $fun ## function (x, ...) ## UseMethod(&quot;mean&quot;) ## &lt;bytecode: 0x3e2fba8&gt; ## &lt;environment: namespace:base&gt; We can now check that it fits the requirements set by methodPS, and that fun it is in fact a function: methodPS$check(xvals[[1]]) ## [1] TRUE xvals[[1]]$fun(1:10) ## [1] 5.5 Imagine now that a different kind of parametrization of the function is desired: The user wants to give a function that selects a certain quantile, where the quantile is set by a parameter. In that case the $transpose function could generate a function in a different way. For interpretability, the parameter is called “quantile” before transformation, and the “fun” parameter is generated on the fly. samplingPS2 = ParamSet$new( list( ParamDbl$new(&quot;quantile&quot;, 0, 1) ) ) samplingPS2$trafo = function(x, param_set) { # x$quantile is a `numeric(1)` between 0 and 1. # We want to turn it into a function! list(fun = function(input) quantile(input, x$quantile)) } design = generate_design_random(samplingPS2, 2) print(design) ## &lt;Design&gt; with 2 rows: ## quantile ## 1: 0.7287 ## 2: 0.1656 The Design now contains the column “quantile” that will be used by the $transpose function to create the fun parameter. We also check that it fits the requirement set by methodPS, and that it is a function. xvals = design$transpose() print(xvals[[1]]) ## $fun ## function(input) quantile(input, x$quantile) ## &lt;environment: 0x13e4a018&gt; methodPS$check(xvals[[1]]) ## [1] TRUE xvals[[1]]$fun(1:10) ## 72.87% ## 7.558 Although the name is suggestive of a “Set”-valued Param, this is unrelated to the other objects that follow the ParamXxx naming scheme.↩ "],
["logging-and-verbosity.html", "6.5 Logging and Verbosity", " 6.5 Logging and Verbosity We use the lgr package for logging and progress output. Because lgr comes with its own exhaustive vignette, we will just briefly give examples how you can change the most important settings related to logging in mlr3. 6.5.1 Available logging levels lgr comes with certain numeric thresholds which correspond to verbosity levels of the logging. For mlr3 the default is set to 400 which corresponds to level “info”. The following ones are available: library(&quot;lgr&quot;) getOption(&quot;lgr.log_levels&quot;) ## fatal error warn info debug trace ## 100 200 300 400 500 600 6.5.2 Global Setting lgr comes with a global option called &quot;lgr.default_threshold&quot; which can be set via options(). You can set a specific level in your .Rprofile which is then used for all packages that use the lgr package. This approach may not be desirable if you want to only change the logging level for mlr3. 6.5.3 Changing mlr3 logging levels To change the setting for mlr3 only, you need to change the threshold of the mlr3 logger like this: lgr::get_logger(&quot;mlr3&quot;)$set_threshold(&quot;&lt;level&gt;&quot;)` Remember that this change only applies to the current R session. "],
["mlr-mlr3-transition-guide.html", "6.6 mlr -&gt; mlr3 Transition Guide", " 6.6 mlr -&gt; mlr3 Transition Guide In case you have already worked with mlr, you may want to quickstart with mlr3 by looking up the specific equivalent of an element of mlr in the new version mlr3. For this, you can use the following table. This table is not complete but should give you an overview about how mlr3 is organized. Category mlr mlr3 Note General / Helper getCacheDir() / deleteCacheDir() Not yet implemented — configureMlr() — — getMlrOptions() — — createDummyFeatures() Not yet implemented mlr3pipelines crossover() — — downsample() Not yet implemented — generateCalibrationData() Not yet implemented — generateCritDifferencesData() Not yet implemented — generateLearningCurveData() Not yet implemented mlr3viz generatePartialDependenceData() Not yet implemented mlr3viz generateThreshVsPerfData() Not yet implemented mlr3viz getCaretParamSet() Not used anymore — reimpute() / impute() Not yet implemented mlr3pipelines fn() / fnr() / fp() / fpr() ??? tn() / tnr() / tp() / tpr() ??? summarizeColumns() ??? summarizeLevels() ??? Task Task mlr_tasks / Task — SurvTask TaskSurv mlr3survival ClusterTask mlr_tasks — MultilabelTask mlr_tasks — SpatialTask Not yet implemented mlr3spatiotemporal Example tasks (iris.task,mtcars.task) mlr_tasks$get(‘iris’) / tsk(‘iris’) — convertMLBenchObjToTask() Not yet implemented mlr3 dropFeatures() Task$select() — getTaskCosts() Not yet implemented — getTaskData() Task$data() — getTaskDesc() / getTaskDescription() Task$print() — getTaskFeatureNames() Task$feature_names — getTaskFormula() Task$formula — getTaskId() Task$id — getTaskNFeats() length(Task$feature_names) — getTaskSize() Task$nrow() — getTaskTargetNames() Task$target_names — getTaskTargets() as.data.table(Task)[,Task$feature_names,with = FALSE] — getTaskType() Task$task_type — oversample() / undersample() — Learner helpLearner() Not yet implemented — helpLearnerParam() Not yet implemented — getLearnerId() Learner$id — setLearnerId() Learner$id — getLearnerModel() Learner$model — getLearnerNote() Not used anymore — getLearnerPackages() Learner$packages — getLearnerParVals() / getLearnerParamSet() Learner$param_set — getLearnerPredictType() Learner$predict_type — getLearnerShortName() Learner$predict_type — getLearnerType() Learner$Type — setPredictType() Learner$Type — getLearnerProperties ??? — getParamSet() Learner$param_set — trainLearner() Learner$train() — predictLearner() Learner$predict() — makeRLearner*() Learner — generateLearningCurveData() Not yet implemented mlr3viz FailureModel — — getFailureModelDump() — — getFailureModelMsg() — — isFailureModel() — — makeLearner() / makeLearners() ??? — Train/Predict/Resample train() Experiment$train() — predict() Experiment$predict() — performance() Experiment$score() — makeResampleDesc() Resampling mlr_resamplings resample() resample() — ResamplePrediction ResampleResult — Aggregation / makeAggregation Not yet implemented — asROCRPrediction() Not yet implemented — ConfusionMatrix / getConfMatrix() / calculateConfusionMatrix() Not yet implemented — calculateROCMeasures() Not yet implemented — estimateRelativeOverfitting() Not yet implemented — estimateResidualVariance() Not yet implemented — getDefaultMeasure() — getMeasureProperties() ??? — getPredictionResponse() / getPredictionSE() / getPredictionTruth() ??? — getPredictionDump() ??? — getPredictionTaskDesc() ??? — getRRDump() ??? — getRRPredictionList() ??? — getRRPredictions() ResampleResult$prediction — getRRTaskDesc() / getRRTaskDescription() ResampleResult\\(task\\)print() — Benchmark benchmark() benchmark() — batchmark() / reduceBatchmarkResults() not used anymore — BenchmarkResult BenchmarkResult — convertBMRToRankMatrix() Not yet implemented — convertMLBenchObjToTask() Not yet implemented — getBMRAggrPerformances() BenchmarkResult$aggregated() — getBMRFeatSelResults() Not yet implemented mlr3filters getBMRFilteredFeatures() Not yet implemented mlr3filters getBMRLearners() / getBMRLearnerIds() / getBMRLearnerShortNames() BenchmarkResult$learners — getBMRMeasures() / getBMRMeasureIds() BenchmarkResult$measures — getBMRModels() BenchmarkResult\\(data\\)learner[[1]]$model — getBMRPerformances() BenchmarkResult\\(data\\)performance — getBMRTaskDescriptions() / getBMRTaskDescs() / getBMRTaskIds() BenchmarkResult$tasks — getBMRTuneResults() Not yet implemented — getBMRPredictions() Not yet implemented — friedmanTestBMR() Not yet implemented — mergeBenchmarkResults() BenchmarkResult$combine() — plotBMRBoxplots() Not yet implemented mlr3viz plotBMRRanksAsBarChart() Not yet implemented mlr3viz plotBMRSummary() Not yet implemented mlr3viz plotResiduals() Not yet implemented mlr3viz Parameter Specification ParamHelpers::makeNumericParam() ParamDbl$new() paradox ParamHelpers::makeNumericVectorParam() ParamDbl$new() paradox ParamHelpers::makeIntegerParam() paradox::ParamInt$new() paradox ParamHelpers::makeIntegerVectorParam() paradox::ParamInt$new() paradox ParamHelpers::makeDiscreteParam() paradox::ParamFct$new() paradox ParamHelpers::makeDiscreteVectorParam() paradox::ParamFct$new() paradox ParamHelpers::makeLogicalParam() paradox::ParamLgl$new() paradox ParamHelpers::makeLogicalVectorParam() paradox::ParamLgl$new() paradox Preprocessing — — — — — — Feature Selection makeFeatSelControlExhaustive() Not yet implemented mlr3filters makeFeatSelControlRandom() Not yet implemented mlr3filters makeFeatSelControlSequential() Not yet implemented mlr3filters makeFeatSelControlGA() Not yet implemented mlr3filters makeFilter() Filter$new() mlr3filters FeatSelResult Not yet implemented mlr3filters listFilterMethods() mlr_filters mlr3filters analyzeFeatSelResult() Not yet implemented mlr3filters getBMRFeatSelResults() Not yet implemented mlr3filters getBMRFilteredFeatures() Not yet implemented mlr3filters getFeatSelResult() Not yet implemented mlr3filters getFeatureImportance() Not yet implemented mlr3filters getFilteredFeatures() Not yet implemented mlr3filters makeFeatSelWrapper() Not used anymore mlr3filters makeFilterWrapper() Not used anymore mlr3filters getResamplingIndices() Not yet implemented selectFeatures() Not yet implemented mlr3filters filterFeatures() Filter$filter_*() mlr3filters generateFilterValuesData() Filter$calculate() mlr3filters Tuning getTuneResult() Not yet implemented mlr3tuning getTuneResultOptPath() Not yet implemented mlr3tuning makeTuneControl*() Tuner mlr3tuning makeTuneMultiCritControl*() Tuner mlr3tuning Parallelization ParallelMap::parallelStart*(), parallelMap::parallelStop() future::plan() / future Plotting plotBMRBoxplots() Not yet implemented mlr3viz plotBMRRanksAsBarChart() Not yet implemented mlr3viz plotBMRSummary() Not yet implemented mlr3viz plotCalibration() Not yet implemented mlr3viz plotCritDifferences() Not yet implemented mlr3viz plotFilterValues() Not yet implemented mlr3viz plotHyperParsEffect() Not yet implemented mlr3viz plotLearnerPrediction() Not yet implemented mlr3viz plotLearningCurve() Not yet implemented mlr3viz plotPartialDependence() Not yet implemented mlr3viz plotResiduals() Not yet implemented mlr3viz plotROCCurves() Not yet implemented mlr3viz plotThreshVsPerf() Not yet implemented mlr3viz plotTuneMultiCritResult() Not yet implemented mlr3viz FDA extractFDAFPCA() Not yet implemented mlr3fda extractFDAFourier() Not yet implemented mlr3fda extractFDAMultiResFeatures() Not yet implemented mlr3fda extractFDAWavelets() Not yet implemented mlr3fda "],
["extending.html", "7 Extending", " 7 Extending This chapter gives instructions on how to extend mlr3 and its extension packages. The following sections are available: Create a new learner Create a custom tuner Create custom pipelines (mlr3pipelines) PipeOpCopy Custom preprocessing pipelines Custom hyperparameters The following topics will be available soon: Creation of custom measures Creation of filters "],
["extending-mlr3.html", "7.1 Extending mlr3", " 7.1 Extending mlr3 7.1.1 Learners Here, we show how to create a custom LearnerClassif step-by-step. Preferably, you checkout our template package for new learners. Alternatively, here is a template snippet for a new classification learner: LearnerClassifYourLearner = R6::R6Class(&quot;LearnerClassifYourLearner&quot;, inherit = LearnerClassif, public = list( initialize = function(id = &quot;classif.yourlearner&quot;) { super$initialize( id = id, param_set = ParamSet$new(), predict_types = , feature_types = , properties = , packages = , ) }, train = function(task) { }, predict = function(task) { } ) ) In the first line of the template, we create a new R6 class with class &quot;LearnerClassifYourLearner&quot;. The next line determines the parent class: As we want to create a classification learner, we obviously want to inherit from LearnerClassif. A learner consists of three parts: Meta information about the learners A train_internal() function which takes a (filtered) TaskClassif and returns a model A predict_internal() function which operates on the model in self$model (stored during $train()) and a (differently subsetted) TaskClassif to return a named list of predictions. 7.1.1.1 Meta-information In the constructor function initialize() the constructor of the super class LearnerClassif is called with meta information about the learner we want to construct. This includes: id: The id of the new learner. param_set: A set of hyperparameters and their description, provided as paradox::ParamSet. It is perfectly fine to add no parameters here for a first draft. For each hyperparameter you want to add, you have to select the appropriate class: paradox::ParamLgl for scalar logical hyperparameters. paradox::ParamInt for scalar integer hyperparameters. paradox::ParamDbl for scalar numeric hyperparameters. paradox::ParamFct for scalar factor hyperparameters (this includes characters). paradox::ParamUty for everything else. predict_types: Set of predict types the learner is capable of. These differ depending on the type of the learner. LearnerClassif response: Only predicts a class label for each observation in the test set. prob: Also predicts the posterior probability for each class for each observation in the test set. LearnerRegr response: Only predicts a numeric response for each observation in the test set. se: Also predicts the standard error for each value of response for each observation in the test set. feature_types: Set of feature types the learner can handle. See mlr_reflections$task_feature_types for feature types supported by mlr3. properties: Set of properties of the learner. Possible properties include: &quot;twoclass&quot;: The learner works on binary classification problems. &quot;multiclass&quot;: The learner works on multi-class classification problems. &quot;missings&quot;: The learner can natively handle missing values. &quot;weights&quot;: The learner can work on tasks which have observation weights / case weights. &quot;parallel&quot;: The learner can be parallelized, e.g. via threading. &quot;importance&quot;: The learner supports extracting importance values for features. If this property is set, you must also implement a public method importance() to retrieve the importance values from the model. &quot;selected features&quot;: The learner supports extracting the features which where used. If this property is set, you must also implement a public method selected_features() to retrieve the set of used features from the model. Set of required packages to run the learner. For a simplified rpart::rpart(), the initialization could look like this: initialize = function(id = &quot;classif.rpart&quot;) { ps = ParamSet$new(list( ParamDbl$new(id = &quot;cp&quot;, default = 0.01, lower = 0, upper = 1, tags = &quot;train&quot;), ParamInt$new(id = &quot;xval&quot;, default = 0L, lower = 0L, tags = &quot;train&quot;) )) ps$values = list(xval = 0L) super$initialize( id = id, packages = &quot;rpart&quot;, feature_types = c(&quot;logical&quot;, &quot;integer&quot;, &quot;numeric&quot;, &quot;factor&quot;), predict_types = c(&quot;response&quot;, &quot;prob&quot;), param_set = ps, properties = c(&quot;twoclass&quot;, &quot;multiclass&quot;, &quot;weights&quot;, &quot;missings&quot;) ) } We only have specified a small subset of the available hyperparameters: The complexity &quot;cp&quot; is numeric, its feasible range is [0,1], it defaults to 0.01 and the parameter is used during &quot;train&quot;. The complexity &quot;xval&quot; is integer, its lower bound 0, its default is 0 and the parameter is also used during &quot;train&quot;. Note that we have changed the default here from 10 to 0 to save some computation time. This is not done by setting a different default in ParamInt$new(), but instead by setting the value implicitly. 7.1.1.2 Train function We continue the to adept the template for a rpart::rpart() learner, and now tackle the train_internal() function. The train function takes a Task as input and must return an arbitrary model. First, we write something down that works completely without mlr3: data = iris model = rpart::rpart(Species ~ ., data = iris, xval = 0) In the next step, we replace the data frame data with a Task: task = tsk(&quot;iris&quot;) model = rpart::rpart(Species ~ ., data = task$data(), xval = 0) The target variable &quot;Species&quot; is still hard-coded and specific to the task. This is unnecessary, as the information about the target variable is stored in the task: task$target_names ## [1] &quot;Species&quot; task$formula() ## Species ~ . ## NULL We can adapt our code accordingly: rpart::rpart(task$formula(), data = task$data(), xval = 0) ## n= 150 ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 150 100 setosa (0.33333 0.33333 0.33333) ## 2) Petal.Length&lt; 2.45 50 0 setosa (1.00000 0.00000 0.00000) * ## 3) Petal.Length&gt;=2.45 100 50 versicolor (0.00000 0.50000 0.50000) ## 6) Petal.Width&lt; 1.75 54 5 versicolor (0.00000 0.90741 0.09259) * ## 7) Petal.Width&gt;=1.75 46 1 virginica (0.00000 0.02174 0.97826) * The last thing missing is the handling of hyperparameters. Instead of the hard-coded xval, we query the hyperparameter settings from the Learner itself. To illustrate this, we quickly construct the tree learner from the mlr3 package, and use the method get_value() from the ParamSet to retrieve all set hyperparameters with tag &quot;train&quot;. self = lrn(&quot;classif.rpart&quot;) self$param_set$get_values(tags = &quot;train&quot;) ## $xval ## [1] 0 To pass all hyperparameters down to the model fitting function, we recommend to use either do.call or the function mlr3misc::invoke(). pars = self$param_set$get_values(tags = &quot;train&quot;) mlr3misc::invoke(rpart::rpart, task$formula(), data = task$data(), .args = pars) ## n= 150 ## ## node), split, n, loss, yval, (yprob) ## * denotes terminal node ## ## 1) root 150 100 setosa (0.33333 0.33333 0.33333) ## 2) Petal.Length&lt; 2.45 50 0 setosa (1.00000 0.00000 0.00000) * ## 3) Petal.Length&gt;=2.45 100 50 versicolor (0.00000 0.50000 0.50000) ## 6) Petal.Width&lt; 1.75 54 5 versicolor (0.00000 0.90741 0.09259) * ## 7) Petal.Width&gt;=1.75 46 1 virginica (0.00000 0.02174 0.97826) * In the final learner, self will of course reference the learner itself. In the last step, we wrap everything in a function. train_internal = function(task) { pars = self$param_set$get_values(tags = &quot;train&quot;) mlr3misc::invoke(rpart::rpart, task$formula(), data = task$data(), .args = pars) } 7.1.1.3 Predict function The internal predict function predict_internal also operates on a Task as well as on the model stored during train() in self$model. The return value is a Prediction object. We proceed analogously to the section on the train function: We start with a version without any mlr3 objects and continue to replace objects until we have reached the desired interface: # inputs: task = tsk(&quot;iris&quot;) self = list(model = rpart::rpart(task$formula(), data = task$data())) data = iris response = predict(self$model, newdata = data, type = &quot;class&quot;) prob = predict(self$model, newdata = data, type = &quot;prob&quot;) The rpart::predict.rpart() function predicts class labels if argument type is set to to &quot;class&quot;, and class probabilities if set to &quot;prob&quot;. Next, we transition from data to a task again and construct a proper PredictionClassif object to return. Additionally, as we do not want to run the prediction twice, we differentiate what type of prediction is requested by querying the set predict type of the learner. The complete predict_internal function looks like this: predict_internal = function(task) { self$predict_type = &quot;response&quot; response = prob = NULL if (self$predict_type == &quot;response&quot;) { response = predict(self$model, newdata = task$data(), type = &quot;class&quot;) } else { prob = predict(self$model, newdata = task$data(), type = &quot;prob&quot;) } PredictionClassif$new(task, response = response, prob = prob) } Note that if the learner would need to handle hyperparameters during the predict step, we would proceed analogously to the train() step and use self$params(&quot;predict&quot;) in combination with mlr3misc::invoke(). Also note that you cannot rely on the column order of the data returned by task$data(), i.e. the order of columns may be different from the order of the columns during $train(). You have to make sure that your learner accesses columns by name, not by position (like some algorithms with a matrix interface do). You may have to restore the order manually here, see “classif.svm” for an example. 7.1.1.4 Final learner LearnerClassifYourRpart = R6::R6Class(&quot;LearnerClassifYourRpart&quot;, inherit = LearnerClassif, public = list( initialize = function(id = &quot;classif.rpart&quot;) { ps = ParamSet$new(list( ParamDbl$new(id = &quot;cp&quot;, default = 0.01, lower = 0, upper = 1, tags = &quot;train&quot;), ParamInt$new(id = &quot;xval&quot;, default = 0L, lower = 0L, tags = &quot;train&quot;) )) ps$values = list(xval = 0L) super$initialize( id = id, packages = &quot;rpart&quot;, feature_types = c(&quot;logical&quot;, &quot;integer&quot;, &quot;numeric&quot;, &quot;factor&quot;), predict_types = c(&quot;response&quot;, &quot;prob&quot;), param_set = ps, properties = c(&quot;twoclass&quot;, &quot;multiclass&quot;, &quot;weights&quot;, &quot;missings&quot;) ) }, train_internal = function(task) { pars = self$param_set$get_values(tag = &quot;train&quot;) mlr3misc::invoke(rpart::rpart, task$formula(), data = task$data(), .args = pars) }, predict_internal = function(task) { self$predict_type = &quot;response&quot; response = prob = NULL if (self$predict_type == &quot;response&quot;) { response = predict(self$model, newdata = task$data(), type = &quot;class&quot;) } else { prob = predict(self$model, newdata = task$data(), type = &quot;prob&quot;) } PredictionClassif$new(task, response = response, prob = prob) } ) ) lrn = LearnerClassifYourRpart$new() print(lrn) ## &lt;LearnerClassifYourRpart:classif.rpart&gt; ## * Model: - ## * Parameters: xval=0 ## * Packages: rpart ## * Predict Type: response ## * Feature types: logical, integer, numeric, factor ## * Properties: missings, multiclass, twoclass, weights To run some basic tests: task = tsk(&quot;iris&quot;) lrn$train(task) p = lrn$predict(task) p$confusion ## truth ## response setosa versicolor virginica ## setosa 50 0 0 ## versicolor 0 49 5 ## virginica 0 1 45 To run a bunch of automatic tests, you may source some auxiliary scripts from the unit tests of mlr3: helper = list.files(system.file(&quot;testthat&quot;, package = &quot;mlr3&quot;), pattern = &quot;^helper.*\\\\.[rR]&quot;, full.names = TRUE) ok = lapply(helper, source) stopifnot(run_autotest(lrn)) "],
["extending-mlr3pipelines.html", "7.2 Extending mlr3pipelines", " 7.2 Extending mlr3pipelines Work in progress :) "],
["special-tasks.html", "8 Special Tasks", " 8 Special Tasks This chapter explores the different functions of mlr3 when dealing with specific data sets that require further statistical modification to undertake sensible analysis. Following topics are discussed: Survival Analysis Survival analysis is used to monitor the period of time until a specific event takes places. This specific event could be e.g. death, transmission of a disease, marriage or divorce. Two considerations are important: Whether the event occurred within the frame of the given data How much time it took until the event occurred In summary, this sub-chapter explains how to conduct survival analysis in mlr3. Spatial Analysis Spatial analysis data observations entail reference information about spatial characteristics. One of the largest shortcomings of spatial data analysis is the inevitable auto-correlation in spatial data. Auto-correlation is especially severe in data with marginal spatial variation. This sub-chapter provides instructions on how to handle the problems associated with spatial data accordingly. Ordinal Analysis Coming soon! Functional Analysis Functional analysis contains data that consists of curves varying over a continuum e.g. time, frequency or wavelength. This type of analysis is frequently used when examining measurements over a period of time. Steps on how to accommodate functional data structures in mlr3 are explained in the functional analysis-chapter. Multilabel Classification Multilabel classification deals with objects that can belong to more than one category at the same time. Numerous target labels are attributed to a single observation. Working with multilabel data requires one to use modified algorithms, to accommodate data specific characteristics. Two approaches to multilabel classification exist, namely the problem transformation method and the algorithm adaption method. Instructions on how to deal with multilabel analysis in mlr3 can be found in this sub-chapter. Cost Sensitive Classification This sub-chapter deals with the implementation of cost-sensitive classification. Regular classification aims to minimize the misclassification rate and thus all types of misclassification errors are deemed equally severe. Cost-sensitive classification is a setting where the costs caused by different kinds of errors are not assumed to be equal and the objective is to minimize the expected costs. This sub-chapter provides guidance on how to implement a first model. Subsequently, the sub-chapter contains instructions on how to modify cost sensitivity measures, thresholding and threshold tuning. "],
["survival.html", "8.1 Survival Analysis", " 8.1 Survival Analysis Survival analysis examines data on whether a specific event of interest takes place and how long it takes till this event occurs. One cannot use ordinary regression analysis when dealing with survival analysis data sets. First of all, survival data contains solely positive values and therefore needs to be transformed to avoid biases. Secondly, ordinary regression analysis cannot deal with censored observations accordingly. Censored observations are observations in which the event of interest has not occurred, yet. Survival analysis allows the user to handle censored data with limited time frames that sometimes do not entail the event of interest. Note that survival analysis accounts for both censored and uncensored observations while adjusting respective model parameters. The package mlr3survival extends mlr3 with the following objects for survival analysis: TaskSurv to define (right-censored) survival tasks LearnerSurv as base class for survival learners PredictionSurv as specialized class for Prediction objects MeasureSurv as specialized class for performance measures In this example we demonstrate the basic functionality of the package on the rats data from the survival package. This task ships as pre-defined TaskSurv with mlr3survival. library(mlr3survival) task = tsk(&quot;rats&quot;) print(task) ## &lt;TaskSurv:rats&gt; (300 x 5) ## * Target: time, status ## * Properties: - ## * Features (3): ## - int (2): litter, rx ## - fct (1): sex mlr3viz::autoplot(task) # the target column is a survival object: head(task$truth()) ## [1] 101+ 49 104+ 91+ 104+ 102+ # kaplan meier estimator of survival times task$survfit() ## Call: survfit(formula = f, data = self$data(cols = vars)) ## ## n events median 0.95LCL 0.95UCL ## 300 42 NA NA NA # kaplan-meier estimator of survival times # stratify on binarized age variable sf = task$survfit(&quot;sex&quot;) print(sf) ## Call: survfit(formula = f, data = self$data(cols = vars)) ## ## n events median 0.95LCL 0.95UCL ## sex=f 150 40 NA NA NA ## sex=m 150 2 NA NA NA # plot survfit object with ggfortify library(&quot;ggfortify&quot;) ## Loading required package: ggplot2 ## ## Attaching package: &#39;ggplot2&#39; ## The following object is masked from &#39;package:lgr&#39;: ## ## Layout autoplot(sf) Now, we conduct a small benchmark study on the rats task using some of the integrated survival learners: # integrated learners learners = lapply(c(&quot;surv.coxph&quot;, &quot;surv.rpart&quot;, &quot;surv.ranger&quot;), lrn) print(learners) ## [[1]] ## &lt;LearnerSurvCoxPH:surv.coxph&gt; ## * Model: - ## * Parameters: list() ## * Packages: survival ## * Predict Type: risk ## * Feature types: logical, integer, numeric, factor ## * Properties: weights ## ## [[2]] ## &lt;LearnerSurvRpart:surv.rpart&gt; ## * Model: - ## * Parameters: xval=0 ## * Packages: rpart ## * Predict Type: risk ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: importance, missings, selected_features, weights ## ## [[3]] ## &lt;LearnerSurvRanger:surv.ranger&gt; ## * Model: - ## * Parameters: list() ## * Packages: ranger ## * Predict Type: risk ## * Feature types: logical, integer, numeric, character, factor, ordered ## * Properties: importance, oob_error, weights measure = msr(&quot;surv.harrells_c&quot;) print(measure) ## &lt;MeasureSurvHarrellsC:surv.harrells_c&gt; ## * Packages: - ## * Range: [0, 1] ## * Minimize: FALSE ## * Properties: - ## * Predict type: risk set.seed(1) bmr = benchmark(benchmark_grid(task, learners, rsmp(&quot;cv&quot;, folds = 3))) print(bmr) ## &lt;BenchmarkResult&gt; of 9 rows with 3 resampling runs ## nr task_id learner_id resampling_id iters warnings errors ## 1 rats surv.coxph cv 3 0 0 ## 2 rats surv.rpart cv 3 0 0 ## 3 rats surv.ranger cv 3 0 0 mlr3viz::autoplot(bmr, measure = measure) "],
["spatial.html", "8.2 Spatial Analysis", " 8.2 Spatial Analysis Spatial data observations entail reference information about spatial characteristics. This information is frequently stored as coordinates named ‘x’ and ‘y’. Treating spatial data using non-spatial data methods could lead to over-optimistic treatment. This is due to the underlying auto-correlation in spatial data. More following soon! "],
["ordinal.html", "8.3 Ordinal Analysis", " 8.3 Ordinal Analysis More following soon! "],
["functional.html", "8.4 Functional Analysis", " 8.4 Functional Analysis Functional data is data containing an ordering on the dimensions. This implies that functional data consists of curves varying over a continuum, such as time, frequency, or wavelength. 8.4.1 How to model functional data? There are two ways to model functional data: Modification of the learner to be suitable for the functional data Modification of the task to be suitable for the standard- or classification-learner More following soon! "],
["multilabel.html", "8.5 Multilabel Classification", " 8.5 Multilabel Classification Multilabel deals with objects that can belong to more than one category at the same time. More following soon! "],
["cost-sens.html", "8.6 Cost-Sensitive Classification", " 8.6 Cost-Sensitive Classification In regular classification the aim is to minimize the misclassification rate and thus all types of misclassification errors are deemed equally severe. A more general setting is cost-sensitive classification. Cost sensitive classification does not assume that the costs caused by different kinds of errors are equal. The objective of cost sensitive classification is to minimize the expected costs. Imagine you are an analyst for a big credit institution. Let’s also assume that a correct decision of the bank would result in 35% of the profit at the end of a specific period. A correct decision means that the bank predicts that a customer will pay their bills (hence would obtain a loan), and the customer indeed has good credit. On the other hand, a wrong decision means that the bank predicts that the customer’s credit is in good standing, but the opposite is true. This would result in a loss of 100% of the given loan. Good Customer (truth) Bad Customer (truth) Good Customer (predicted) + 0.35 - 1.0 Bad Customer (predicted) 0 0 Expressed as costs (instead of profit), we can write down the cost-matrix as follows: costs = matrix(c(-0.35, 0, 1, 0), nrow = 2) dimnames(costs) = list(response = c(&quot;good&quot;, &quot;bad&quot;), truth = c(&quot;good&quot;, &quot;bad&quot;)) print(costs) ## truth ## response good bad ## good -0.35 1 ## bad 0.00 0 An exemplary data set for such a problem is the German Credit task: library(mlr3) task = tsk(&quot;german_credit&quot;) table(task$truth()) ## ## good bad ## 700 300 The data has 70% customers who are able to pay back their credit, and 30% bad customers who default on the debt. A manager, who doesn’t have any model, could decide to give either everybody a credit or to give nobody a credit. The resulting costs for the German credit data are: # nobody: (700 * costs[2, 1] + 300 * costs[2, 2]) / 1000 ## [1] 0 # everybody (700 * costs[1, 1] + 300 * costs[1, 2]) / 1000 ## [1] 0.055 If the average loan is $20,000, the credit institute would lose more than one million dollar if it would grant everybody a credit: # average profit * average loan * number of customers 0.055 * 20000 * 1000 ## [1] 1100000 Our goal is to find a model which minimizes the costs (and thereby maximizes the expected profit). 8.6.1 A First Model For our first model, we choose an ordinary logistic regression (implemented in the add-on package mlr3learners). We first create a classification task, then resample the model using a 10-fold cross validation and extract the resulting confusion matrix: library(mlr3learners) learner = lrn(&quot;classif.log_reg&quot;) rr = resample(task, learner, rsmp(&quot;cv&quot;)) confusion = rr$prediction()$confusion print(confusion) ## truth ## response good bad ## good 602 154 ## bad 98 146 To calculate the average costs like above, we can simply multiply the elements of the confusion matrix with the elements of the previously introduced cost matrix, and sum the values of the resulting matrix: avg_costs = sum(confusion * costs) / 1000 print(avg_costs) ## [1] -0.0567 With an average loan of $20,000, the logistic regression yields the following costs: avg_costs * 20000 * 1000 ## [1] -1134000 Instead of losing over $1,000,000, the credit institute now can expect a profit of more than $1,000,000. 8.6.2 Cost-sensitive Measure Our natural next step would be to further improve the modeling step in order to maximize the profit. For this purpose we first create a cost-sensitive classification measure which calculates the costs based on our cost matrix. This allows us to conveniently quantify and compare modeling decisions. Fortunately, there already is a predefined measure Measure for this purpose: MeasureClassifCosts: cost_measure = msr(&quot;classif.costs&quot;, costs = costs) print(cost_measure) ## &lt;MeasureClassifCosts:classif.costs&gt; ## * Packages: - ## * Range: [-Inf, Inf] ## * Minimize: TRUE ## * Properties: requires_task ## * Predict type: response If we now call resample() or benchmark(), the cost-sensitive measures will be evaluated. We compare the logistic regression to a simple featureless learner and to a random forest from package ranger : learners = list( lrn(&quot;classif.log_reg&quot;), lrn(&quot;classif.featureless&quot;), lrn(&quot;classif.ranger&quot;) ) cv3 = rsmp(&quot;cv&quot;, folds = 3) bmr = benchmark(benchmark_grid(task, learners, cv3)) bmr$aggregate(cost_measure) ## nr resample_result task_id learner_id resampling_id iters ## 1: 1 &lt;ResampleResult&gt; german_credit classif.log_reg cv 3 ## 2: 2 &lt;ResampleResult&gt; german_credit classif.featureless cv 3 ## 3: 3 &lt;ResampleResult&gt; german_credit classif.ranger cv 3 ## classif.costs ## 1: -0.05436 ## 2: 0.05498 ## 3: -0.04000 As expected, the featureless learner is performing comparably bad. The logistic regression and the random forest work equally well. 8.6.3 Thresholding Although we now correctly evaluate the models in a cost-sensitive fashion, the models themselves are unaware of the classification costs. They assume the same costs for both wrong classification decisions (false positives and false negatives). Some learners natively support cost-sensitive classification (e.g., XXX). However, we will concentrate on a more generic approach which works for all models which can predict probabilities for class labels: thresholding. Most learners can calculate the probability \\(p\\) for the positive class. If \\(p\\) exceeds the threshold \\(0.5\\), they predict the positive class, and the negative class otherwise. For our binary classification case of the credit data, the we primarily want to minimize the errors where the model predicts “good”, but truth is “bad” (i.e., the number of false positives) as this is the more expensive error. If we now increase the threshold to values \\(&gt; 0.5\\), we reduce the number of false negatives. Note that we increase the number of false positives simultaneously, or, in other words, we are trading false positives for false negatives. # fit models with probability prediction learner = lrn(&quot;classif.log_reg&quot;, predict_type = &quot;prob&quot;) rr = resample(task, learner, rsmp(&quot;cv&quot;)) p = rr$prediction() print(p) ## &lt;PredictionClassif&gt; for 1000 observations: ## row_id truth response prob.good prob.bad ## 14 bad good 0.6210 0.379048 ## 20 good good 0.9046 0.095355 ## 25 good good 0.9939 0.006067 ## --- ## 980 bad bad 0.3350 0.665042 ## 983 good good 0.6665 0.333486 ## 999 bad bad 0.3552 0.644800 # helper function to try different threshold values interactively with_threshold = function(p, th) { p$set_threshold(th) list(confusion = p$confusion, costs = p$score(measures = cost_measure, task = task)) } with_threshold(p, 0.5) ## $confusion ## truth ## response good bad ## good 604 159 ## bad 96 141 ## ## $costs ## classif.costs ## -0.0524 with_threshold(p, 0.75) ## $confusion ## truth ## response good bad ## good 468 69 ## bad 232 231 ## ## $costs ## classif.costs ## -0.0948 with_threshold(p, 1.0) ## $confusion ## truth ## response good bad ## good 1 1 ## bad 699 299 ## ## $costs ## classif.costs ## 0.00065 # TODO: include plot of threshold vs performance Instead of manually trying different threshold values, one uses use optimize() to find a good threshold value w.r.t. our performance measure: # simple wrapper function which takes a threshold and returns the resulting model performance # this wrapper is passed to optimize() to find its minimum for thresholds in [0.5, 1] f = function(th) { with_threshold(p, th)$costs } best = optimize(f, c(0.5, 1)) print(best) ## $minimum ## [1] 0.7175 ## ## $objective ## classif.costs ## -0.09795 # optimized confusion matrix: with_threshold(p, best$minimum)$confusion ## truth ## response good bad ## good 497 76 ## bad 203 224 The function optimize() is intended for unimodal functions and therefore may converge to a local optimum here. See below for better alternatives to find good threshold values. 8.6.4 Threshold Tuning More following soon! threshold tuning as pipeline operator joint hyperparameter optimization "],
["model-interpr.html", "9 Model Interpretation with mlr3", " 9 Model Interpretation with mlr3 "],
["iml.html", "9.1 IML", " 9.1 IML "],
["dalex.html", "9.2 Dalex", " 9.2 Dalex "],
["use-cases.html", "10 Use Cases", " 10 Use Cases This chapter is a collection of use cases to showcase mlr3. "],
["use-case-regr-houses.html", "10.1 House Price Prediction in King County", " 10.1 House Price Prediction in King County We use the house_sales_prediction dataset contained in this book in order to provide a use-case for the application of mlr3 on real-world data. library(mlr3book) data(&quot;house_sales_prediction&quot;, package = &quot;mlr3book&quot;) 10.1.1 Exploratory Data Analysis In order to get a quick impression of our data, we perform some initial Exploratory Data Analysis. This helps us to get a first impression of our data and might help us arrive at additional features that can help with the prediction of the house prices. We can get a quick overview using R’s summary function: summary(house_sales_prediction) ## id date price bedrooms ## Min. : 1000102 Length:21613 Min. : 75000 Min. : 0.00 ## 1st Qu.:2123049194 Class :character 1st Qu.: 321950 1st Qu.: 3.00 ## Median :3904930410 Mode :character Median : 450000 Median : 3.00 ## Mean :4580301520 Mean : 540088 Mean : 3.37 ## 3rd Qu.:7308900445 3rd Qu.: 645000 3rd Qu.: 4.00 ## Max. :9900000190 Max. :7700000 Max. :33.00 ## bathrooms sqft_living sqft_lot floors ## Min. :0.00 Min. : 290 Min. : 520 Min. :1.00 ## 1st Qu.:1.75 1st Qu.: 1427 1st Qu.: 5040 1st Qu.:1.00 ## Median :2.25 Median : 1910 Median : 7618 Median :1.50 ## Mean :2.12 Mean : 2080 Mean : 15107 Mean :1.49 ## 3rd Qu.:2.50 3rd Qu.: 2550 3rd Qu.: 10688 3rd Qu.:2.00 ## Max. :8.00 Max. :13540 Max. :1651359 Max. :3.50 ## waterfront view condition grade sqft_above ## Min. :0.0000 Min. :0.000 Min. :1.00 Min. : 1.00 Min. : 290 ## 1st Qu.:0.0000 1st Qu.:0.000 1st Qu.:3.00 1st Qu.: 7.00 1st Qu.:1190 ## Median :0.0000 Median :0.000 Median :3.00 Median : 7.00 Median :1560 ## Mean :0.0075 Mean :0.234 Mean :3.41 Mean : 7.66 Mean :1788 ## 3rd Qu.:0.0000 3rd Qu.:0.000 3rd Qu.:4.00 3rd Qu.: 8.00 3rd Qu.:2210 ## Max. :1.0000 Max. :4.000 Max. :5.00 Max. :13.00 Max. :9410 ## sqft_basement yr_built yr_renovated zipcode lat ## Min. : 0 Min. :1900 Min. : 0.0 Min. :98001 Min. :47.2 ## 1st Qu.: 0 1st Qu.:1951 1st Qu.: 0.0 1st Qu.:98033 1st Qu.:47.5 ## Median : 0 Median :1975 Median : 0.0 Median :98065 Median :47.6 ## Mean : 292 Mean :1971 Mean : 84.4 Mean :98078 Mean :47.6 ## 3rd Qu.: 560 3rd Qu.:1997 3rd Qu.: 0.0 3rd Qu.:98118 3rd Qu.:47.7 ## Max. :4820 Max. :2015 Max. :2015.0 Max. :98199 Max. :47.8 ## long sqft_living15 sqft_lot15 ## Min. :-123 Min. : 399 Min. : 651 ## 1st Qu.:-122 1st Qu.:1490 1st Qu.: 5100 ## Median :-122 Median :1840 Median : 7620 ## Mean :-122 Mean :1987 Mean : 12768 ## 3rd Qu.:-122 3rd Qu.:2360 3rd Qu.: 10083 ## Max. :-121 Max. :6210 Max. :871200 dim(house_sales_prediction) ## [1] 21613 21 Our dataset has 21613 observations and 21 columns. The variable we want to predict is price. In addition to the price column, we have several other columns: id: A unique identifier for every house. date: A date column, indicating when the house was sold. This column is currently not encoded as a date and requires some preprocessing. zipcode: A column indicating the ZIP code. This is a categorical variable with many factor levels. long, lat The longitude and latitude of the house ... several other numeric columns providing information about the house, such as number of rooms, square feet etc. Before we continue with the analysis, we preprocess some features so that they are stored in the correct format. First we convert the date column to numeric to be able to treat it as a numeric feature: library(lubridate) house_sales_prediction$date = ymd(substr(house_sales_prediction$date, 1, 8)) house_sales_prediction$date = as.numeric(as.Date(house_sales_prediction$date, origin = &quot;1900-01-01&quot;)) house_sales_prediction$date = house_sales_prediction$date Afterwards, we convert the zipcode to a factor: house_sales_prediction$zipcode = as.factor(house_sales_prediction$zipcode) And add a new column renovated indicating whether a house was renovated at some point. house_sales_prediction$renovated = as.numeric(house_sales_prediction$yr_renovated &gt; 0) # And drop the id column: house_sales_prediction$id = NULL Additionally we convert the price from Dollar to units of 1000 Dollar to improve readability. house_sales_prediction$price = house_sales_prediction$price / 1000 We can now plot the density of the price to get a first impression on its distribution. library(ggplot2) ggplot(house_sales_prediction, aes(x = price)) + geom_density() We can see that the prices for most houses lie between 75.000 and 1.5 million dollars. There are few extreme values of up to 7.7 million dollars. Feature engineering often allows us to incorporate additional knowledge about the data and underlying processes. This can often greatly enhance predictive performance. A simple example: A house which has yr_renovated == 0 means that is has not been renovated yet. Additionally we want to drop features which should not have any influence (id column). After those initial manipulations, we load all required packages and create a Task containing our data. library(mlr3) library(mlr3viz) tsk = TaskRegr$new(&quot;sales&quot;, house_sales_prediction, target = &quot;price&quot;) We can inspect associations between variables using mlr3viz’s autoplot function in order to get some good first impressions for our data. Note, that this does in no way prevent us from using other powerful plot functions of our choice on the original data. 10.1.1.1 Distribution of the price: The outcome we want to predict is the price variable. The autoplot function provides a good first glimpse on our data. As the resulting object is a ggplot2 object, we can use faceting and other functions from ggplot2 in order to enhance plots. library(ggplot2) autoplot(tsk) + facet_wrap(~renovated) We can observe that renovated flats seem to achieve higher sales values, and this might thus be a relevant feature. Additionally, we can for example look at the condition of the house. Again, we clearly can see that the price rises with increasing condition. autoplot(tsk) + facet_wrap(~condition) 10.1.1.2 Association between variables In addition to the association with the target variable, the association between the features can also lead to interesting insights. We investigate using variables associated with the quality and size of the house. Note that we use $clone() and $select() to clone the task and select only a subset of the features for the autoplot function, as autoplot per default uses all features. The task is cloned before we select features in order to keep the original task intact. # Variables associated with quality autoplot(tsk$clone()$select(tsk$feature_names[c(3, 17)]), type = &quot;pairs&quot;) autoplot(tsk$clone()$select(tsk$feature_names[c(9:12)]), type = &quot;pairs&quot;) 10.1.2 Splitting into train and test data In mlr3, we do not create train and test data sets, but instead keep only a vector of train and test indices. set.seed(4411) train.idx = sample(seq_len(tsk$nrow), 0.7 * tsk$nrow) test.idx = setdiff(seq_len(tsk$nrow), train.idx) 10.1.3 A first model: Decision Tree Decision tree’s cannot only be used as a powerful tool for predictive models but for exploratory data analysis. In order to fit a decision tree, we first get the regr.rpart learner from the mlr_learners dictionary by using the sugar function lrn. For now we leave out the zipcode variable, as we also have the latitude and longitude of each house. tsk_nozip = tsk$clone()$select(setdiff(tsk$feature_names, &quot;zipcode&quot;)) # Get the learner lrn = lrn(&quot;regr.rpart&quot;) # And train on the task lrn$train(tsk_nozip, row_ids = train.idx) plot(lrn$model) text(lrn$model) The learned tree relies on several variables in order to distinguish between cheaper and pricier houses. The features we split along are grade, sqft_living, but also some features related to the area (longitude and latitude). We can visualize the price across different regions in order to get more info: # Load the ggmap package in order to visualize on a map library(ggmap) # And create a quick plot for the price qmplot(long, lat, maptype = &quot;watercolor&quot;, color = log(price), data = house_sales_prediction[train.idx[1:3000],]) + scale_colour_viridis_c() # And the zipcode qmplot(long, lat, maptype = &quot;watercolor&quot;, color = zipcode, data = house_sales_prediction[train.idx[1:3000],]) + guides(color = FALSE) We can see that the price is clearly associated with the zipcode when comparing the two plots. As a result, we might want to indeed use the zipcode column in our future endeavours. 10.1.4 A first baseline: Decision Tree After getting an initial idea for our data, we might want to construct a first baseline, in order to see what a simple model already can achieve. We use resample with 3-fold cross-validation on our training data in order to get a reliable estimate of the algorithm’s performance on future data. Before we start with defining and training learners, we create a Resampling in order to make sure that we always compare on exactly the same data. library(mlr3learners) cv3 = rsmp(&quot;cv&quot;, folds = 3) cv3$instantiate(tsk$clone()$filter(train.idx)) For the cross-validation we only use the training data by cloning the task and selecting only observations from the training set. lrn_rpart = lrn(&quot;regr.rpart&quot;) res = resample(task = tsk$clone()$filter(train.idx), lrn_rpart, cv3) res$score(&quot;regr.mse&quot;) ## Warning: &#39;Automatic object creation from strings in `mlr3`&#39; is deprecated. ## Use &#39;msr&#39; instead. ## See help(&quot;Deprecated&quot;) ## task task_id learner learner_id resampling ## 1: &lt;TaskRegr&gt; sales &lt;LearnerRegrRpart&gt; regr.rpart &lt;ResamplingCV&gt; ## 2: &lt;TaskRegr&gt; sales &lt;LearnerRegrRpart&gt; regr.rpart &lt;ResamplingCV&gt; ## 3: &lt;TaskRegr&gt; sales &lt;LearnerRegrRpart&gt; regr.rpart &lt;ResamplingCV&gt; ## resampling_id iteration prediction regr.mse ## 1: cv 1 &lt;list&gt; 45416 ## 2: cv 2 &lt;list&gt; 49599 ## 3: cv 3 &lt;list&gt; 42518 sprintf(&quot;RMSE of the simple rpart: %s&quot;, round(sqrt(res$aggregate()), 2)) ## [1] &quot;RMSE of the simple rpart: 214.11&quot; 10.1.5 Many Trees: Random Forest We might be able to improve upon the RMSE using more powerful learners. We first load the mlr3learners package, which contains the ranger learner (a package which implements the “Random Forest” algorithm). lrn_ranger = lrn(&quot;regr.ranger&quot;, num.trees = 15L) res = resample(task = tsk$clone()$filter(train.idx), lrn_ranger, cv3) res$score(&quot;regr.mse&quot;) ## Warning: &#39;Automatic object creation from strings in `mlr3`&#39; is deprecated. ## Use &#39;msr&#39; instead. ## See help(&quot;Deprecated&quot;) ## task task_id learner learner_id resampling ## 1: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## 2: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## 3: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## resampling_id iteration prediction regr.mse ## 1: cv 1 &lt;list&gt; 23892 ## 2: cv 2 &lt;list&gt; 22455 ## 3: cv 3 &lt;list&gt; 18899 sprintf(&quot;RMSE of the simple ranger: %s&quot;, round(sqrt(res$aggregate()), 2)) ## [1] &quot;RMSE of the simple ranger: 147.48&quot; Often tuning RandomForest methods does not increase predictive performances substantially. If time permits, it can nonetheless lead to improvements and should thus be performed. In this case, we resort to tune a different kind of model: Gradient Boosted Decision Trees from the package xgboost. 10.1.6 A better baseline: AutoTuner Tuning can often further improve the performance. In this case, we tune the xgboost learner in order to see whether this can improve performance. For the AutoTuner we have to specify a Termination Criterion (how long the tuning should run) a Tuner (which tuning method to use) and a ParamSet (which space we might want to search through). For now we do not use the zipcode column, as xgboost cannot naturally deal with categorical features. The AutoTuner automatically performs nested cross-validation. set.seed(444L) library(mlr3tuning) library(paradox) lrn_xgb = lrn(&quot;regr.xgboost&quot;) # Define the ParamSet ps = ParamSet$new( params = list( ParamDbl$new(id = &quot;eta&quot;, lower = 0.2, upper = .4), ParamDbl$new(id = &quot;min_child_weight&quot;, lower = 1, upper = 20), ParamDbl$new(id = &quot;subsample&quot;, lower = .7, upper = .8), ParamDbl$new(id = &quot;colsample_bytree&quot;, lower = .9, upper = 1), ParamDbl$new(id = &quot;colsample_bylevel&quot;, lower = .5, upper = .7), ParamInt$new(id = &quot;nrounds&quot;, lower = 1L, upper = 25) )) # Define the Terminator terminator = TerminatorEvaluations$new(10) cv3 = rsmp(&quot;cv&quot;, folds = 3) at = AutoTuner$new(lrn_xgb, cv3, measures = &quot;regr.mse&quot;, ps, terminator, tuner = TunerRandomSearch, tuner_settings = list()) res$score(&quot;regr.mse&quot;) sprintf(&quot;RMSE of the tuned xgboost: %s&quot;, round(sqrt(res$aggregate()), 2)) We can obtain the resulting params in the respective splits by accessing the ResampleResult. sapply(res$learners, function(x) x$param_set$values) ## $num.trees ## [1] 15 ## ## $num.trees ## [1] 15 ## ## $num.trees ## [1] 15 NOTE: To keep runtime low, we only tune parts of the hyperparameter space of xgboost in this example. Additionally, we only allow for \\(10\\) random search iterations, which is usually to little for real-world applications. Nonetheless, we are able to obtain an improved performance when comparing to the ranger model. In order to further improve our results we have several options: Find or engineer better features Remove Features to avoid overfitting Obtain additional data (often prohibitive) Try more models Improve the tuning Increase the tuning budget Enlarge the tuning search space Use a more efficient tuning algorithm Stacking and Ensembling (see Pipelines) Below we will investigate some of those possibilities and investigate whether this improves performance. 10.1.7 Engineering Features: Mutating ZIP-Codes In order to better cluster the zip codes, we compute a new feature: med_price: It computes the median price in each zip-code. This might help our model to improve the prediction. # Create a new feature and append it to the task zip_price = house_sales_prediction[, .(med_price = median(price)), by = zipcode] # Join on the original data to match with original columns, then cbind to the task tsk$cbind(house_sales_prediction[zip_price, on=&quot;zipcode&quot;][,&quot;med_price&quot;]) Again, we run resample and compute the RMSE. lrn_ranger = lrn(&quot;regr.ranger&quot;) res = resample(task = tsk$clone()$filter(train.idx), lrn_ranger, cv3) res$score(&quot;regr.mse&quot;) ## Warning: &#39;Automatic object creation from strings in `mlr3`&#39; is deprecated. ## Use &#39;msr&#39; instead. ## See help(&quot;Deprecated&quot;) ## task task_id learner learner_id resampling ## 1: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## 2: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## 3: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## resampling_id iteration prediction regr.mse ## 1: cv 1 &lt;list&gt; 22719 ## 2: cv 2 &lt;list&gt; 20384 ## 3: cv 3 &lt;list&gt; 17799 sprintf(&quot;RMSE of ranger with med_price: %s&quot;, round(sqrt(res$aggregate()), 2)) ## [1] &quot;RMSE of ranger with med_price: 142.48&quot; 10.1.8 Obtaining a sparser model In many cases, we might want to have a sparse model. For this purpose we can use a mlr3featse::Filter implemented in mlr3filters. This can prevent our learner from overfitting make it easier for humans to interpret models as fewer variables influence the resulting prediction. library(mlr3filters) filter = FilterMRMR$new()$calculate(tsk) tsk_ftsel = tsk$clone()$select(head(names(filter$scores), 12)) The resulting RMSE is slightly higher, and at the same time we only use \\(12\\) features. lrn_ranger = lrn(&quot;regr.ranger&quot;) res = resample(task = tsk_ftsel$clone()$filter(train.idx), lrn_ranger, cv3) res$score(&quot;regr.mse&quot;) ## Warning: &#39;Automatic object creation from strings in `mlr3`&#39; is deprecated. ## Use &#39;msr&#39; instead. ## See help(&quot;Deprecated&quot;) ## task task_id learner learner_id resampling ## 1: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## 2: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## 3: &lt;TaskRegr&gt; sales &lt;LearnerRegrRanger&gt; regr.ranger &lt;ResamplingCV&gt; ## resampling_id iteration prediction regr.mse ## 1: cv 1 &lt;list&gt; 34720 ## 2: cv 2 &lt;list&gt; 29056 ## 3: cv 3 &lt;list&gt; 25907 sprintf(&quot;RMSE of ranger with filtering: %s&quot;, round(sqrt(res$aggregate()), 2)) ## [1] &quot;RMSE of ranger with filtering: 172.9&quot; "],
["appendix.html", "11 Appendix", " 11 Appendix "],
["list-learners.html", "11.1 Integrated Learners", " 11.1 Integrated Learners Id Feature Types Required package Properties Predict Types classif.debug lgl, int, dbl, chr, fct, ord Missings, Multiclass, Twoclass response, prob classif.featureless lgl, int, dbl, chr, fct, ord Importance, Missings, Multiclass, Selected Features, Twoclass response, prob classif.glmnet int, dbl glmnet Multiclass, Twoclass, Weights response, prob classif.kknn lgl, int, dbl, fct, ord kknn, withr Multiclass, Twoclass response, prob classif.lda lgl, int, dbl, fct, ord MASS Multiclass, Twoclass, Weights response, prob classif.log_reg lgl, int, dbl, chr, fct, ord stats Twoclass, Weights response, prob classif.naive_bayes lgl, int, dbl, fct e1071 Multiclass, Twoclass response, prob classif.qda lgl, int, dbl, fct, ord MASS Multiclass, Twoclass, Weights response, prob classif.ranger lgl, int, dbl, chr, fct, ord ranger Importance, Multiclass, Oob Error, Twoclass, Weights response, prob classif.rpart lgl, int, dbl, chr, fct, ord rpart Importance, Missings, Multiclass, Selected Features, Twoclass, Weights response, prob classif.svm int, dbl e1071 Multiclass, Twoclass response, prob classif.xgboost int, dbl xgboost Importance, Missings, Multiclass, Twoclass, Weights response, prob regr.featureless lgl, int, dbl, chr, fct, ord stats Importance, Missings, Selected Features response, se regr.glmnet int, dbl glmnet Weights response regr.kknn lgl, int, dbl, fct, ord kknn, withr response regr.km int, dbl DiceKriging response, se regr.lm int, dbl, fct stats Weights response, se regr.ranger lgl, int, dbl, chr, fct, ord ranger Importance, Oob Error, Weights response, se regr.rpart lgl, int, dbl, chr, fct, ord rpart Importance, Missings, Selected Features, Weights response regr.svm int, dbl e1071 response regr.xgboost int, dbl xgboost Importance, Missings, Weights response surv.coxph lgl, int, dbl, fct survival Weights risk surv.featureless lgl, int, dbl, chr, fct, ord Importance, Missings, Selected Features risk surv.glmnet int, dbl glmnet Weights risk surv.ranger lgl, int, dbl, chr, fct, ord ranger Importance, Oob Error, Weights risk surv.rpart lgl, int, dbl, chr, fct, ord rpart Importance, Missings, Selected Features, Weights risk "],
["list-filters.html", "11.2 Integrated Filter Methods", " 11.2 Integrated Filter Methods 11.2.1 Standalone filter methods Name Task task_properties param_set Features Package carscore Regr character(0) &lt;environment&gt; numeric &lt;span style=&quot; font-style: italic; &quot; &gt;care&lt;/span&gt; correlation Regr character(0) &lt;environment&gt; Integer, Numeric &lt;span style=&quot; font-style: italic; &quot; &gt;stats&lt;/span&gt; cmim Classif &amp; Regr character(0) &lt;environment&gt; Integer, Numeric, Factor, Ordered &lt;span style=&quot; font-style: italic; &quot; &gt;praznik&lt;/span&gt; information_gain Classif &amp; Regr character(0) &lt;environment&gt; Integer, Numeric, Factor, Ordered &lt;span style=&quot; font-style: italic; &quot; &gt;FSelectorRcpp&lt;/span&gt; mrmr Classif &amp; Regr character(0) &lt;environment&gt; c(“numeric”, “factor”, “integer”, “character”, “logical”) &lt;span style=&quot; font-style: italic; &quot; &gt;praznik&lt;/span&gt; variance Classif &amp; Regr character(0) &lt;environment&gt; Integer, Numeric &lt;span style=&quot; font-style: italic; &quot; &gt;stats&lt;/span&gt; anova Classif character(0) &lt;environment&gt; Integer, Numeric &lt;span style=&quot; font-style: italic; &quot; &gt;stats&lt;/span&gt; auc Classif twoclass &lt;environment&gt; Integer, Numeric &lt;span style=&quot; font-style: italic; &quot; &gt;Metrics&lt;/span&gt; disr Classif character(0) &lt;environment&gt; Integer, Numeric, Factor, Ordered &lt;span style=&quot; font-style: italic; &quot; &gt;praznik&lt;/span&gt; importance Classif character(0) &lt;environment&gt; c(“logical”, “integer”, “numeric”, “character”, “factor”, “ordered”) &lt;span style=&quot; font-style: italic; &quot; &gt;rpart&lt;/span&gt; jmi Classif character(0) &lt;environment&gt; Integer, Numeric, Factor, Ordered &lt;span style=&quot; font-style: italic; &quot; &gt;praznik&lt;/span&gt; jmim Classif character(0) &lt;environment&gt; Integer, Numeric, Factor, Ordered &lt;span style=&quot; font-style: italic; &quot; &gt;praznik&lt;/span&gt; kruskal_test Classif character(0) &lt;environment&gt; Integer, Numeric &lt;span style=&quot; font-style: italic; &quot; &gt;stats&lt;/span&gt; mim Classif character(0) &lt;environment&gt; Integer, Numeric, Factor, Ordered &lt;span style=&quot; font-style: italic; &quot; &gt;praznik&lt;/span&gt; njmim Classif character(0) &lt;environment&gt; Integer, Numeric, Factor, Ordered &lt;span style=&quot; font-style: italic; &quot; &gt;praznik&lt;/span&gt; performance Classif character(0) &lt;environment&gt; c(“logical”, “integer”, “numeric”, “character”, “factor”, “ordered”) &lt;span style=&quot; font-style: italic; &quot; &gt;rpart&lt;/span&gt; 11.2.2 Algorithms With Embedded Filter Methods Please take a look at the implementation details of the respective learner which feature types are supported by the filter. ## [1] &quot;classif.featureless&quot; &quot;classif.ranger&quot; &quot;classif.rpart&quot; ## [4] &quot;classif.xgboost&quot; &quot;regr.featureless&quot; &quot;regr.ranger&quot; ## [7] &quot;regr.rpart&quot; &quot;regr.xgboost&quot; &quot;surv.featureless&quot; ## [10] &quot;surv.ranger&quot; &quot;surv.rpart&quot; "],
["references.html", "References", " References "]
]
